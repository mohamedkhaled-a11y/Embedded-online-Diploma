
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000382  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_1>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_2>
   c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_Init>:
	
}
void GPIO_Init()
{
	//configure PORTD (PIN 2,3) AS input
	DDRD &= ~(0b11<<2);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	83 7f       	andi	r24, 0xF3	; 243
  70:	81 bb       	out	0x11, r24	; 17
	//configure PORTD_as output
	DDRD |= (1<<7 | 1<<6 | 1<<5);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 6e       	ori	r24, 0xE0	; 224
  76:	81 bb       	out	0x11, r24	; 17
	
	//TURN LEDs off
	
	DDRD &= ~(1<<7 | 1<<6 | 1<<5);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	8f 71       	andi	r24, 0x1F	; 31
  7c:	81 bb       	out	0x11, r24	; 17
  7e:	08 95       	ret

00000080 <INT_Init>:
{
	
	
	//Making INT0 Trigger on any logical change
	
	MCUCR |= (1<<0);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	81 60       	ori	r24, 0x01	; 1
  84:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<1);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<2);
	MCUCR |= (1<<3);
	
*/
   
   MCUCR |= (1<<ISC11);
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	85 bf       	out	0x35, r24	; 53


	//Making INT2 trigger on falling edge
	MCUCSR &= ~(1<<6);
  92:	84 b7       	in	r24, 0x34	; 52
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	84 bf       	out	0x34, r24	; 52
	
	
	//Enabling external interrupt
	GICR |= (1<<7 | 1<<6 | 1<<5);
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 6e       	ori	r24, 0xE0	; 224
  9c:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<7);
  9e:	8f b7       	in	r24, 0x3f	; 63
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8f bf       	out	0x3f, r24	; 63
  a4:	08 95       	ret

000000a6 <main>:

void INT_Init();
void GPIO_Init();
int main(void)
{
	INT_Init();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <INT_Init>
	GPIO_Init();
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_Init>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x8>

000000b0 <__vector_1>:




ISR(INT0_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	PORTD |= (1<<5);
  c0:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	89 e6       	ldi	r24, 0x69	; 105
  c6:	98 e1       	ldi	r25, 0x18	; 24
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__vector_1+0x18>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <__vector_1+0x22>
  d2:	00 00       	nop
	_delay_ms(1000);
	
	PORTD &= ~(1<<5);
  d4:	95 98       	cbi	0x12, 5	; 18
	
	
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_2>:

ISR(INT1_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
	PORTD |= (1<<6);
  f6:	96 9a       	sbi	0x12, 6	; 18
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 e6       	ldi	r24, 0x69	; 105
  fc:	98 e1       	ldi	r25, 0x18	; 24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_2+0x18>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_2+0x22>
 108:	00 00       	nop
	_delay_ms(1000);
	
	PORTD &= ~(1<<6);
 10a:	96 98       	cbi	0x12, 6	; 18
	
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_3>:
ISR(INT2_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	2f 93       	push	r18
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	PORTD |= (1<<7);
 12c:	97 9a       	sbi	0x12, 7	; 18
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <__vector_3+0x18>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <__vector_3+0x22>
 13e:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<7);
 140:	97 98       	cbi	0x12, 7	; 18
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
