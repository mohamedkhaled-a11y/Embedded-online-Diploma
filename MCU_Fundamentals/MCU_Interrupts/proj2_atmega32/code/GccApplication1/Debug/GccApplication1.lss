
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030b  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035f  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001633  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000180d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_2>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_Init>:
	
}
void GPIO_Init()
{
	//configure PORTD (PIN 2,3) AS input
	DDRD &= ~(0b11<<2);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	83 7f       	andi	r24, 0xF3	; 243
  70:	81 bb       	out	0x11, r24	; 17
	//configure PORTD_as output
	DDRD |= (1<<7 | 1<<6 | 1<<5);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 6e       	ori	r24, 0xE0	; 224
  76:	81 bb       	out	0x11, r24	; 17
	
	//TURN LEDs off
	
	DDRD &= ~(1<<7 | 1<<6 | 1<<5);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	8f 71       	andi	r24, 0x1F	; 31
  7c:	81 bb       	out	0x11, r24	; 17
  7e:	08 95       	ret

00000080 <INT_Init>:
{
	
	
	//Making INT0 Trigger on any logical change
	
	MCUCR |= (1<<0);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	81 60       	ori	r24, 0x01	; 1
  84:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<1);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	85 bf       	out	0x35, r24	; 53
	
	//Making INT1 trigger on Rising edge
	
	MCUCR |= (1<<2);
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<3);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	88 60       	ori	r24, 0x08	; 8
  96:	85 bf       	out	0x35, r24	; 53
	//Making INT2 trigger on falling edge
	MCUCSR &= ~(1<<6);
  98:	84 b7       	in	r24, 0x34	; 52
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	84 bf       	out	0x34, r24	; 52
	
	
	//Enabling external interrupt
	GICR |= (1<<7 | 1<<6 | 1<<5);
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 6e       	ori	r24, 0xE0	; 224
  a2:	8b bf       	out	0x3b, r24	; 59
	
	SREG |= (1<<7);
  a4:	8f b7       	in	r24, 0x3f	; 63
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	8f bf       	out	0x3f, r24	; 63
  aa:	08 95       	ret

000000ac <main>:

void INT_Init();
void GPIO_Init();
int main(void)
{
	INT_Init();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <INT_Init>
	GPIO_Init();
  b0:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_Init>
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x8>

000000b6 <__vector_1>:




ISR(INT0_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	PORTD |= (1<<5);
  c6:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	98 e1       	ldi	r25, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_1+0x18>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x22>
  d8:	00 00       	nop
	_delay_ms(1000);
	
	PORTD &= ~(1<<5);
  da:	95 98       	cbi	0x12, 5	; 18
	
	
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_2>:

ISR(INT1_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	PORTD |= (1<<6);
  fc:	96 9a       	sbi	0x12, 6	; 18
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <__vector_2+0x18>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <__vector_2+0x22>
 10e:	00 00       	nop
	_delay_ms(1000);
	
	PORTD &= ~(1<<6);
 110:	96 98       	cbi	0x12, 6	; 18
	
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_3>:
ISR(INT2_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	PORTD |= (1<<7);
 132:	97 9a       	sbi	0x12, 7	; 18
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	98 e1       	ldi	r25, 0x18	; 24
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <__vector_3+0x18>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__vector_3+0x22>
 144:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<7);
 146:	97 98       	cbi	0x12, 7	; 18
}
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
