
Uart_section1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009e  0080009e  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001055  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bd  00000000  00000000  00001685  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000883  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  000028c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c2  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000390e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e9       	ldi	r26, 0x9E	; 158
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  8a:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  92:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f e7       	ldi	r18, 0x7F	; 127
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <LCD_lcd_kick+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_lcd_kick+0x12>
  a4:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  a6:	c3 98       	cbi	0x18, 3	; 24
  a8:	08 95       	ret

000000aa <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  aa:	8a b3       	in	r24, 0x1a	; 26
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  b0:	c2 9a       	sbi	0x18, 2	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  b2:	c1 98       	cbi	0x18, 1	; 24
	LCD_lcd_kick();
  b4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
  b8:	8a b3       	in	r24, 0x1a	; 26
  ba:	80 6f       	ori	r24, 0xF0	; 240
  bc:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  be:	c2 98       	cbi	0x18, 2	; 24
  c0:	08 95       	ret

000000c2 <LCD_WRITE_COMMAND>:
	
}


void LCD_WRITE_COMMAND(unsigned char command){
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
		_delay_ms(1);
		LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
		LCD_check_lcd_isbusy();
  c6:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_check_lcd_isbusy>
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	9c 2f       	mov	r25, r28
  d0:	90 7f       	andi	r25, 0xF0	; 240
  d2:	89 2b       	or	r24, r25
  d4:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	89 7f       	andi	r24, 0xF9	; 249
  da:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick ();
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	28 2f       	mov	r18, r24
  e4:	2f 70       	andi	r18, 0x0F	; 15
  e6:	30 e1       	ldi	r19, 0x10	; 16
  e8:	c3 9f       	mul	r28, r19
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	82 2b       	or	r24, r18
  f0:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	89 7f       	andi	r24, 0xF9	; 249
  f6:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
  f8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
}
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <LCD_clear_screen>:
 */ 

#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
 106:	08 95       	ret

00000108 <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	39 f4       	brne	.+14     	; 0x11a <LCD_GOTO_XY+0x12>
	{
		if (position < 16 && position >= 0)
 10c:	60 31       	cpi	r22, 0x10	; 16
 10e:	68 f4       	brcc	.+26     	; 0x12a <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	86 0f       	add	r24, r22
 114:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
 118:	08 95       	ret
		}
	}
	if (line == 2)
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	31 f4       	brne	.+12     	; 0x12a <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
 11e:	60 31       	cpi	r22, 0x10	; 16
 120:	20 f4       	brcc	.+8      	; 0x12a <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 122:	80 ec       	ldi	r24, 0xC0	; 192
 124:	86 0f       	add	r24, r22
 126:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
 12a:	08 95       	ret

0000012c <LCD_INIT>:
 12c:	8f e3       	ldi	r24, 0x3F	; 63
 12e:	9c e9       	ldi	r25, 0x9C	; 156
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_INIT+0x4>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_INIT+0xa>
 136:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 138:	87 b3       	in	r24, 0x17	; 23
 13a:	8e 60       	ori	r24, 0x0E	; 14
 13c:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	81 7f       	andi	r24, 0xF1	; 241
 142:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	8a bb       	out	0x1a, r24	; 26
 148:	8f e2       	ldi	r24, 0x2F	; 47
 14a:	95 e7       	ldi	r25, 0x75	; 117
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_INIT+0x20>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_INIT+0x26>
 152:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 154:	0e 94 80 00 	call	0x100	; 0x100 <LCD_clear_screen>
		//LCD_WRITE_COMMAND(0x02);		/* send for 4 bit initialization of LCD  */
		//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
		//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 170:	8f e0       	ldi	r24, 0x0F	; 15
 172:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
 176:	08 95       	ret

00000178 <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 178:	cf 93       	push	r28
 17a:	c8 2f       	mov	r28, r24
		_delay_ms(1);
		LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
		//LCD_check_lcd_isbusy();
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	9c 2f       	mov	r25, r28
 182:	90 7f       	andi	r25, 0xF0	; 240
 184:	89 2b       	or	r24, r25
 186:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 188:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 18a:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick();
 18c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 190:	8b b3       	in	r24, 0x1b	; 27
 192:	28 2f       	mov	r18, r24
 194:	2f 70       	andi	r18, 0x0F	; 15
 196:	30 e1       	ldi	r19, 0x10	; 16
 198:	c3 9f       	mul	r28, r19
 19a:	c0 01       	movw	r24, r0
 19c:	11 24       	eor	r1, r1
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 1a2:	c1 9a       	sbi	0x18, 1	; 24
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 1a4:	c2 98       	cbi	0x18, 2	; 24
		LCD_lcd_kick ();
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
}
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
	int count = 0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 1bc:	14 c0       	rjmp	.+40     	; 0x1e6 <LCD_WRITE_STRING+0x38>
		count++;
 1be:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 1c0:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_WRITE_CHAR>
		if (count == 16)
 1c4:	c0 31       	cpi	r28, 0x10	; 16
 1c6:	d1 05       	cpc	r29, r1
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <LCD_WRITE_STRING+0x24>
	}
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 1ca:	80 ec       	ldi	r24, 0xC0	; 192
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
 1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <LCD_WRITE_STRING+0x38>
		LCD_WRITE_CHAR(*string++);
		if (count == 16)
		{
			LCD_GOTO_XY(2,0);
		}
		else if (count == 32)
 1d2:	c0 32       	cpi	r28, 0x20	; 32
 1d4:	d1 05       	cpc	r29, r1
 1d6:	39 f4       	brne	.+14     	; 0x1e6 <LCD_WRITE_STRING+0x38>
		{
			LCD_clear_screen();
 1d8:	0e 94 80 00 	call	0x100	; 0x100 <LCD_clear_screen>
void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_WRITE_COMMAND>
		}
		else if (count == 32)
		{
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 1e6:	f8 01       	movw	r30, r16
 1e8:	81 91       	ld	r24, Z+
 1ea:	8f 01       	movw	r16, r30
 1ec:	81 11       	cpse	r24, r1
 1ee:	e7 cf       	rjmp	.-50     	; 0x1be <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <main>:
#include "MCAL/UART.h"
#include <avr/io.h>
#include <avr/interrupt.h>

void main(void)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	ce 56       	subi	r28, 0x6E	; 110
 204:	d1 09       	sbc	r29, r1
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
	
	
	LCD_INIT();
 210:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_INIT>
	UART_Init();
 214:	0e 94 45 01 	call	0x28a	; 0x28a <UART_Init>
	
	LCD_GOTO_XY(0,0);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_GOTO_XY>
	uint8_t l[10]="UART TR";
 220:	88 e0       	ldi	r24, 0x08	; 8
 222:	e2 e6       	ldi	r30, 0x62	; 98
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	de 01       	movw	r26, r28
 228:	11 96       	adiw	r26, 0x01	; 1
 22a:	01 90       	ld	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	8a 95       	dec	r24
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x30>
 232:	1a 86       	std	Y+10, r1	; 0x0a
 234:	19 86       	std	Y+9, r1	; 0x09
	LCD_WRITE_STRING(l);
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_WRITE_STRING>
	 

    uint8_t Buff[50];
	uint8_t ch[50]="Mohamed";
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	ec e6       	ldi	r30, 0x6C	; 108
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	de 01       	movw	r26, r28
 246:	dd 96       	adiw	r26, 0x3d	; 61
 248:	01 90       	ld	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	8a 95       	dec	r24
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x4e>
 250:	fe 01       	movw	r30, r28
 252:	eb 5b       	subi	r30, 0xBB	; 187
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	8a e2       	ldi	r24, 0x2A	; 42
 258:	df 01       	movw	r26, r30
 25a:	1d 92       	st	X+, r1
 25c:	8a 95       	dec	r24
 25e:	e9 f7       	brne	.-6      	; 0x25a <main+0x60>
	UART_SEND_STR(ch);
 260:	ce 01       	movw	r24, r28
 262:	cd 96       	adiw	r24, 0x3d	; 61
 264:	0e 94 55 01 	call	0x2aa	; 0x2aa <UART_SEND_STR>



      while (1) 
    {
		LCD_GOTO_XY(2,0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_GOTO_XY>
		
		UART_RECIEVE_STR(&Buff);
 270:	ce 01       	movw	r24, r28
 272:	0b 96       	adiw	r24, 0x0b	; 11
 274:	0e 94 6e 01 	call	0x2dc	; 0x2dc <UART_RECIEVE_STR>
		LCD_WRITE_STRING(&Buff);
 278:	ce 01       	movw	r24, r28
 27a:	0b 96       	adiw	r24, 0x0b	; 11
 27c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_WRITE_STRING>
		UART_SEND_STR(&Buff);
 280:	ce 01       	movw	r24, r28
 282:	0b 96       	adiw	r24, 0x0b	; 11
 284:	0e 94 55 01 	call	0x2aa	; 0x2aa <UART_SEND_STR>
 288:	ef cf       	rjmp	.-34     	; 0x268 <main+0x6e>

0000028a <UART_Init>:
		UART_TX_IRQEnable();
		UART_SEND_NOBLOCK(str[0]);
		TX_Str=str;
		flag_send=0;
	}
}
 28a:	83 e3       	ldi	r24, 0x33	; 51
 28c:	89 b9       	out	0x09, r24	; 9
 28e:	80 b5       	in	r24, 0x20	; 32
 290:	82 60       	ori	r24, 0x02	; 2
 292:	80 bd       	out	0x20, r24	; 32
 294:	53 9a       	sbi	0x0a, 3	; 10
 296:	54 9a       	sbi	0x0a, 4	; 10
 298:	08 95       	ret

0000029a <UART_Transmit>:
 29a:	5d 9b       	sbis	0x0b, 5	; 11
 29c:	fe cf       	rjmp	.-4      	; 0x29a <UART_Transmit>
 29e:	8c b9       	out	0x0c, r24	; 12
 2a0:	08 95       	ret

000002a2 <UART_Recieve>:
 2a2:	5f 9b       	sbis	0x0b, 7	; 11
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <UART_Recieve>
 2a6:	8c b1       	in	r24, 0x0c	; 12
 2a8:	08 95       	ret

000002aa <UART_SEND_STR>:
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	8c 01       	movw	r16, r24
 2b2:	fc 01       	movw	r30, r24
 2b4:	80 81       	ld	r24, Z
 2b6:	88 23       	and	r24, r24
 2b8:	51 f0       	breq	.+20     	; 0x2ce <UART_SEND_STR+0x24>
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
 2bc:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Transmit>
 2c0:	cf 5f       	subi	r28, 0xFF	; 255
 2c2:	f8 01       	movw	r30, r16
 2c4:	ec 0f       	add	r30, r28
 2c6:	f1 1d       	adc	r31, r1
 2c8:	80 81       	ld	r24, Z
 2ca:	c8 17       	cp	r28, r24
 2cc:	b8 f3       	brcs	.-18     	; 0x2bc <UART_SEND_STR+0x12>
 2ce:	8d e0       	ldi	r24, 0x0D	; 13
 2d0:	0e 94 4d 01 	call	0x29a	; 0x29a <UART_Transmit>
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <UART_RECIEVE_STR>:
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	7c 01       	movw	r14, r24
 2e8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_Recieve>
 2ec:	f7 01       	movw	r30, r14
 2ee:	80 83       	st	Z, r24
 2f0:	8d 30       	cpi	r24, 0x0D	; 13
 2f2:	61 f0       	breq	.+24     	; 0x30c <UART_RECIEVE_STR+0x30>
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
 2f6:	cf 5f       	subi	r28, 0xFF	; 255
 2f8:	87 01       	movw	r16, r14
 2fa:	0c 0f       	add	r16, r28
 2fc:	11 1d       	adc	r17, r1
 2fe:	0e 94 51 01 	call	0x2a2	; 0x2a2 <UART_Recieve>
 302:	f8 01       	movw	r30, r16
 304:	80 83       	st	Z, r24
 306:	8d 30       	cpi	r24, 0x0D	; 13
 308:	b1 f7       	brne	.-20     	; 0x2f6 <UART_RECIEVE_STR+0x1a>
 30a:	01 c0       	rjmp	.+2      	; 0x30e <UART_RECIEVE_STR+0x32>
 30c:	87 01       	movw	r16, r14
 30e:	f8 01       	movw	r30, r16
 310:	10 82       	st	Z, r1
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	08 95       	ret

0000031e <UART_RX_IRQEnable>:
 31e:	57 9a       	sbi	0x0a, 7	; 10
 320:	08 95       	ret

00000322 <__vector_15>:


ISR(USART_TXC_vect)
{
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	8f 93       	push	r24
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	static uint8_t i=1; 
	if(TX_Str[i]!=0)
 332:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 336:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <__data_end>
 33a:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <__data_end+0x1>
 33e:	e8 0f       	add	r30, r24
 340:	f1 1d       	adc	r31, r1
 342:	80 81       	ld	r24, Z
 344:	88 23       	and	r24, r24
 346:	39 f0       	breq	.+14     	; 0x356 <__vector_15+0x34>



void UART_SEND_NOBLOCK(uint8_t data)
{
	UDR =data;	
 348:	8c b9       	out	0x0c, r24	; 12
{
	static uint8_t i=1; 
	if(TX_Str[i]!=0)
	{
		UART_SEND_NOBLOCK(TX_Str[i]);
		i++;
 34a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 354:	05 c0       	rjmp	.+10     	; 0x360 <__vector_15+0x3e>
	}
	else
	{
		i=1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		flag_send=1;
 35c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag_send>
	}
}
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	8f 91       	pop	r24
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_13>:


ISR(USART_RXC_vect)
{
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	LCD_INIT();
 392:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_INIT>
	static uint8_t j=0;
	uint8_t ch;
	UART_RX_IRQEnable();
 396:	0e 94 8f 01 	call	0x31e	; 0x31e <UART_RX_IRQEnable>
}


uint8_t UART_Recieve_NOBLOCK(void)
{
	return UDR;
 39a:	8c b1       	in	r24, 0x0c	; 12



void UART_SEND_NOBLOCK(uint8_t data)
{
	UDR =data;	
 39c:	8c b9       	out	0x0c, r24	; 12
	static uint8_t j=0;
	uint8_t ch;
	UART_RX_IRQEnable();
	ch=UART_Recieve_NOBLOCK();
	UART_SEND_NOBLOCK(ch);
	LCD_WRITE_CHAR(ch);
 39e:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_WRITE_CHAR>
	
	
	
	
}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
