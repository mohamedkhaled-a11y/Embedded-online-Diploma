
Uart_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009a4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000ad4  08000ad4  00010ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aec  08000aec  00010af4  2**0
                  CONTENTS
  4 .ARM          00000000  08000aec  08000aec  00010af4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aec  08000af4  00010af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aec  08000aec  00010aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000af0  08000af0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000af4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000af4  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010af4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040be  00000000  00000000  00010b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009ff  00000000  00000000  00014bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a84  00000000  00000000  000155da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00016060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016230  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000ccd  00000000  00000000  000163a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000209c  00000000  00000000  00017075  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009e16  00000000  00000000  00019111  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022f27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000059c  00000000  00000000  00022fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000abc 	.word	0x08000abc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000abc 	.word	0x08000abc

08000170 <main>:
	MCAL_UART_SendData(USART1, &ch, enable);

}
*/
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0

	UART_Config USARTcfg;

	USARTcfg.BaudRate=UART_BAUD_RATE_115200;
 8000176:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800017a:	60bb      	str	r3, [r7, #8]
	USARTcfg.HWFLOWCTRL=UART_HWFlow_CTRL_NONE;
 800017c:	2300      	movs	r3, #0
 800017e:	743b      	strb	r3, [r7, #16]
	USARTcfg.IRQEnable=UART_IRQ_Enable_NONE;
 8000180:	2300      	movs	r3, #0
 8000182:	747b      	strb	r3, [r7, #17]
	USARTcfg.UART_IRQ_CALLBACK=NULL;
 8000184:	2300      	movs	r3, #0
 8000186:	617b      	str	r3, [r7, #20]
	USARTcfg.parity=UART_Parity_None;
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
	USARTcfg.WordLength=UART_WordLength_8Bits;
 800018c:	2300      	movs	r3, #0
 800018e:	81bb      	strh	r3, [r7, #12]
	USARTcfg.StopBits=UART_ONE_STOP_Bit;
 8000190:	2300      	movs	r3, #0
 8000192:	73fb      	strb	r3, [r7, #15]
	USARTcfg.mode=UART_TX_RX_mode;
 8000194:	230c      	movs	r3, #12
 8000196:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &USARTcfg);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4619      	mov	r1, r3
 800019c:	4808      	ldr	r0, [pc, #32]	; (80001c0 <main+0x50>)
 800019e:	f000 fab3 	bl	8000708 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001a2:	4807      	ldr	r0, [pc, #28]	; (80001c0 <main+0x50>)
 80001a4:	f000 fbe2 	bl	800096c <MCAL_UART_GPIO_Set_Pins>


	while(1)
	{

		MCAL_UART_ReceiveData(USART1, &ch, enable);
 80001a8:	2200      	movs	r2, #0
 80001aa:	4906      	ldr	r1, [pc, #24]	; (80001c4 <main+0x54>)
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <main+0x50>)
 80001ae:	f000 fb97 	bl	80008e0 <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &ch, enable);
 80001b2:	2200      	movs	r2, #0
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <main+0x54>)
 80001b6:	4802      	ldr	r0, [pc, #8]	; (80001c0 <main+0x50>)
 80001b8:	f000 fb68 	bl	800088c <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(USART1, &ch, enable);
 80001bc:	e7f4      	b.n	80001a8 <main+0x38>
 80001be:	bf00      	nop
 80001c0:	40013800 	.word	0x40013800
 80001c4:	20000020 	.word	0x20000020

080001c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001c8:	480d      	ldr	r0, [pc, #52]	; (8000200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d0:	480c      	ldr	r0, [pc, #48]	; (8000204 <LoopForever+0x6>)
  ldr r1, =_edata
 80001d2:	490d      	ldr	r1, [pc, #52]	; (8000208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d4:	4a0d      	ldr	r2, [pc, #52]	; (800020c <LoopForever+0xe>)
  movs r3, #0
 80001d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001d8:	e002      	b.n	80001e0 <LoopCopyDataInit>

080001da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001de:	3304      	adds	r3, #4

080001e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e4:	d3f9      	bcc.n	80001da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001e6:	4a0a      	ldr	r2, [pc, #40]	; (8000210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001e8:	4c0a      	ldr	r4, [pc, #40]	; (8000214 <LoopForever+0x16>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001ec:	e001      	b.n	80001f2 <LoopFillZerobss>

080001ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f0:	3204      	adds	r2, #4

080001f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f4:	d3fb      	bcc.n	80001ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001f6:	f000 fc3d 	bl	8000a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001fa:	f7ff ffb9 	bl	8000170 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   r0, =_estack
 8000200:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000208:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800020c:	08000af4 	.word	0x08000af4
  ldr r2, =_sbss
 8000210:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000214:	20000060 	.word	0x20000060

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>

0800021a <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800021a:	b480      	push	{r7}
 800021c:	b083      	sub	sp, #12
 800021e:	af00      	add	r7, sp, #0
 8000220:	4603      	mov	r3, r0
 8000222:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000224:	88fb      	ldrh	r3, [r7, #6]
 8000226:	2b80      	cmp	r3, #128	; 0x80
 8000228:	d042      	beq.n	80002b0 <Get_CRLH_Position+0x96>
 800022a:	2b80      	cmp	r3, #128	; 0x80
 800022c:	dc11      	bgt.n	8000252 <Get_CRLH_Position+0x38>
 800022e:	2b08      	cmp	r3, #8
 8000230:	d036      	beq.n	80002a0 <Get_CRLH_Position+0x86>
 8000232:	2b08      	cmp	r3, #8
 8000234:	dc06      	bgt.n	8000244 <Get_CRLH_Position+0x2a>
 8000236:	2b02      	cmp	r3, #2
 8000238:	d02e      	beq.n	8000298 <Get_CRLH_Position+0x7e>
 800023a:	2b04      	cmp	r3, #4
 800023c:	d02e      	beq.n	800029c <Get_CRLH_Position+0x82>
 800023e:	2b01      	cmp	r3, #1
 8000240:	d028      	beq.n	8000294 <Get_CRLH_Position+0x7a>
 8000242:	e047      	b.n	80002d4 <Get_CRLH_Position+0xba>
 8000244:	2b20      	cmp	r3, #32
 8000246:	d02f      	beq.n	80002a8 <Get_CRLH_Position+0x8e>
 8000248:	2b40      	cmp	r3, #64	; 0x40
 800024a:	d02f      	beq.n	80002ac <Get_CRLH_Position+0x92>
 800024c:	2b10      	cmp	r3, #16
 800024e:	d029      	beq.n	80002a4 <Get_CRLH_Position+0x8a>
 8000250:	e040      	b.n	80002d4 <Get_CRLH_Position+0xba>
 8000252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000256:	d033      	beq.n	80002c0 <Get_CRLH_Position+0xa6>
 8000258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800025c:	dc09      	bgt.n	8000272 <Get_CRLH_Position+0x58>
 800025e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000262:	d029      	beq.n	80002b8 <Get_CRLH_Position+0x9e>
 8000264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000268:	d028      	beq.n	80002bc <Get_CRLH_Position+0xa2>
 800026a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800026e:	d021      	beq.n	80002b4 <Get_CRLH_Position+0x9a>
 8000270:	e030      	b.n	80002d4 <Get_CRLH_Position+0xba>
 8000272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000276:	d027      	beq.n	80002c8 <Get_CRLH_Position+0xae>
 8000278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800027c:	dc03      	bgt.n	8000286 <Get_CRLH_Position+0x6c>
 800027e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000282:	d01f      	beq.n	80002c4 <Get_CRLH_Position+0xaa>
 8000284:	e026      	b.n	80002d4 <Get_CRLH_Position+0xba>
 8000286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800028a:	d01f      	beq.n	80002cc <Get_CRLH_Position+0xb2>
 800028c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000290:	d01e      	beq.n	80002d0 <Get_CRLH_Position+0xb6>
 8000292:	e01f      	b.n	80002d4 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000294:	2300      	movs	r3, #0
 8000296:	e01e      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 8000298:	2304      	movs	r3, #4
 800029a:	e01c      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 800029c:	2308      	movs	r3, #8
 800029e:	e01a      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 80002a0:	230c      	movs	r3, #12
 80002a2:	e018      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80002a4:	2310      	movs	r3, #16
 80002a6:	e016      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 80002a8:	2314      	movs	r3, #20
 80002aa:	e014      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80002ac:	2318      	movs	r3, #24
 80002ae:	e012      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80002b0:	231c      	movs	r3, #28
 80002b2:	e010      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 80002b4:	2300      	movs	r3, #0
 80002b6:	e00e      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80002b8:	2304      	movs	r3, #4
 80002ba:	e00c      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80002bc:	2308      	movs	r3, #8
 80002be:	e00a      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80002c0:	230c      	movs	r3, #12
 80002c2:	e008      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80002c4:	2310      	movs	r3, #16
 80002c6:	e006      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80002c8:	2314      	movs	r3, #20
 80002ca:	e004      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80002cc:	2318      	movs	r3, #24
 80002ce:	e002      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80002d0:	231c      	movs	r3, #28
 80002d2:	e000      	b.n	80002d6 <Get_CRLH_Position+0xbc>
		break ;


	}
return 0 ;
 80002d4:	2300      	movs	r3, #0

}
 80002d6:	4618      	mov	r0, r3
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
	volatile uint32_t* configregister = NULL ;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
	uint8_t	PIN_Config = 0 ;
 80002ee:	2300      	movs	r3, #0
 80002f0:	72fb      	strb	r3, [r7, #11]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2bff      	cmp	r3, #255	; 0xff
 80002f8:	d801      	bhi.n	80002fe <MCAL_GPIO_Init+0x1e>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	e001      	b.n	8000302 <MCAL_GPIO_Init+0x22>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3304      	adds	r3, #4
 8000302:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff86 	bl	800021a <Get_CRLH_Position>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	230f      	movs	r3, #15
 8000314:	4093      	lsls	r3, r2
 8000316:	43da      	mvns	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	401a      	ands	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	2b04      	cmp	r3, #4
 8000328:	d00b      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	789b      	ldrb	r3, [r3, #2]
 800032e:	2b05      	cmp	r3, #5
 8000330:	d007      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	789b      	ldrb	r3, [r3, #2]
 8000336:	2b07      	cmp	r3, #7
 8000338:	d003      	beq.n	8000342 <MCAL_GPIO_Init+0x62>
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	789b      	ldrb	r3, [r3, #2]
 800033e:	2b06      	cmp	r3, #6
 8000340:	d11c      	bne.n	800037c <MCAL_GPIO_Init+0x9c>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	789b      	ldrb	r3, [r3, #2]
 8000346:	3b04      	subs	r3, #4
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	b25a      	sxtb	r2, r3
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	b25b      	sxtb	r3, r3
 8000352:	4313      	orrs	r3, r2
 8000354:	b25b      	sxtb	r3, r3
 8000356:	b2db      	uxtb	r3, r3
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800035e:	7afc      	ldrb	r4, [r7, #11]
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff58 	bl	800021a <Get_CRLH_Position>
 800036a:	4603      	mov	r3, r0
 800036c:	fa04 f203 	lsl.w	r2, r4, r3
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	431a      	orrs	r2, r3
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	e057      	b.n	800042c <MCAL_GPIO_Init+0x14c>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	789b      	ldrb	r3, [r3, #2]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d003      	beq.n	800038c <MCAL_GPIO_Init+0xac>
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	789b      	ldrb	r3, [r3, #2]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d115      	bne.n	80003b8 <MCAL_GPIO_Init+0xd8>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	789b      	ldrb	r3, [r3, #2]
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	b2db      	uxtb	r3, r3
 8000394:	f003 030f 	and.w	r3, r3, #15
 8000398:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800039a:	7afc      	ldrb	r4, [r7, #11]
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff3a 	bl	800021a <Get_CRLH_Position>
 80003a6:	4603      	mov	r3, r0
 80003a8:	fa04 f203 	lsl.w	r2, r4, r3
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	431a      	orrs	r2, r3
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	e039      	b.n	800042c <MCAL_GPIO_Init+0x14c>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	789b      	ldrb	r3, [r3, #2]
 80003bc:	2b08      	cmp	r3, #8
 80003be:	d110      	bne.n	80003e2 <MCAL_GPIO_Init+0x102>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 80003c0:	2304      	movs	r3, #4
 80003c2:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80003c4:	7afc      	ldrb	r4, [r7, #11]
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff25 	bl	800021a <Get_CRLH_Position>
 80003d0:	4603      	mov	r3, r0
 80003d2:	fa04 f203 	lsl.w	r2, r4, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	431a      	orrs	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 80003e0:	e024      	b.n	800042c <MCAL_GPIO_Init+0x14c>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 80003e2:	2308      	movs	r3, #8
 80003e4:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80003e6:	7afc      	ldrb	r4, [r7, #11]
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff14 	bl	800021a <Get_CRLH_Position>
 80003f2:	4603      	mov	r3, r0
 80003f4:	fa04 f203 	lsl.w	r2, r4, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	431a      	orrs	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	2b02      	cmp	r3, #2
 8000408:	d107      	bne.n	800041a <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	683a      	ldr	r2, [r7, #0]
 8000410:	8812      	ldrh	r2, [r2, #0]
 8000412:	431a      	orrs	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	e008      	b.n	800042c <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	8812      	ldrh	r2, [r2, #0]
 8000422:	43d2      	mvns	r2, r2
 8000424:	401a      	ands	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	60da      	str	r2, [r3, #12]
}
 800042a:	e7ff      	b.n	800042c <MCAL_GPIO_Init+0x14c>
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	bd90      	pop	{r4, r7, pc}

08000434 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <EXTI0_IRQHandler+0x1c>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <EXTI0_IRQHandler+0x1c>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <EXTI0_IRQHandler+0x20>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4798      	blx	r3
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010400 	.word	0x40010400
 8000454:	20000024 	.word	0x20000024

08000458 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <EXTI1_IRQHandler+0x1c>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <EXTI1_IRQHandler+0x1c>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <EXTI1_IRQHandler+0x20>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	4798      	blx	r3
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010400 	.word	0x40010400
 8000478:	20000024 	.word	0x20000024

0800047c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <EXTI2_IRQHandler+0x1c>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <EXTI2_IRQHandler+0x1c>)
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 800048c:	4b03      	ldr	r3, [pc, #12]	; (800049c <EXTI2_IRQHandler+0x20>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	4798      	blx	r3
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40010400 	.word	0x40010400
 800049c:	20000024 	.word	0x20000024

080004a0 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <EXTI3_IRQHandler+0x1c>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <EXTI3_IRQHandler+0x1c>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <EXTI3_IRQHandler+0x20>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4798      	blx	r3
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40010400 	.word	0x40010400
 80004c0:	20000024 	.word	0x20000024

080004c4 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <EXTI4_IRQHandler+0x1c>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <EXTI4_IRQHandler+0x1c>)
 80004ce:	f043 0310 	orr.w	r3, r3, #16
 80004d2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <EXTI4_IRQHandler+0x20>)
 80004d6:	691b      	ldr	r3, [r3, #16]
 80004d8:	4798      	blx	r3
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40010400 	.word	0x40010400
 80004e4:	20000024 	.word	0x20000024

080004e8 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	f003 0320 	and.w	r3, r3, #32
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d008      	beq.n	800050a <EXTI9_5_IRQHandler+0x22>
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a22      	ldr	r2, [pc, #136]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6153      	str	r3, [r2, #20]
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <EXTI9_5_IRQHandler+0xa4>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000512:	2b00      	cmp	r3, #0
 8000514:	d008      	beq.n	8000528 <EXTI9_5_IRQHandler+0x40>
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 800051c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b1a      	ldr	r3, [pc, #104]	; (800058c <EXTI9_5_IRQHandler+0xa4>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000530:	2b00      	cmp	r3, #0
 8000532:	d008      	beq.n	8000546 <EXTI9_5_IRQHandler+0x5e>
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 800053a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053e:	6153      	str	r3, [r2, #20]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <EXTI9_5_IRQHandler+0xa4>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800054e:	2b00      	cmp	r3, #0
 8000550:	d008      	beq.n	8000564 <EXTI9_5_IRQHandler+0x7c>
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <EXTI9_5_IRQHandler+0xa4>)
 8000560:	6a1b      	ldr	r3, [r3, #32]
 8000562:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800056c:	2b00      	cmp	r3, #0
 800056e:	d008      	beq.n	8000582 <EXTI9_5_IRQHandler+0x9a>
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <EXTI9_5_IRQHandler+0xa0>)
 8000576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057a:	6153      	str	r3, [r2, #20]
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <EXTI9_5_IRQHandler+0xa4>)
 800057e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000580:	4798      	blx	r3

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010400 	.word	0x40010400
 800058c:	20000024 	.word	0x20000024

08000590 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800059c:	2b00      	cmp	r3, #0
 800059e:	d008      	beq.n	80005b2 <EXTI15_10_IRQHandler+0x22>
 80005a0:	4b2a      	ldr	r3, [pc, #168]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a29      	ldr	r2, [pc, #164]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6153      	str	r3, [r2, #20]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <EXTI15_10_IRQHandler+0xc0>)
 80005ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b0:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d008      	beq.n	80005d0 <EXTI15_10_IRQHandler+0x40>
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a22      	ldr	r2, [pc, #136]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <EXTI15_10_IRQHandler+0xc0>)
 80005cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ce:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d008      	beq.n	80005ee <EXTI15_10_IRQHandler+0x5e>
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a1a      	ldr	r2, [pc, #104]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e6:	6153      	str	r3, [r2, #20]
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <EXTI15_10_IRQHandler+0xc0>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d008      	beq.n	800060c <EXTI15_10_IRQHandler+0x7c>
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 8000600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <EXTI15_10_IRQHandler+0xc0>)
 8000608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060a:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	2b00      	cmp	r3, #0
 8000616:	d008      	beq.n	800062a <EXTI15_10_IRQHandler+0x9a>
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000622:	6153      	str	r3, [r2, #20]
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <EXTI15_10_IRQHandler+0xc0>)
 8000626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000628:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d008      	beq.n	8000648 <EXTI15_10_IRQHandler+0xb8>
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <EXTI15_10_IRQHandler+0xbc>)
 800063c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <EXTI15_10_IRQHandler+0xc0>)
 8000644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000646:	4798      	blx	r3

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010400 	.word	0x40010400
 8000650:	20000024 	.word	0x20000024

08000654 <MCAL_RCC_GetSYS_CLCKFreq>:
 * =======================================================================================
 */


uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: Not applicable*/

	switch((RCC->CFGR >>2 ) &0b11)
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	2b01      	cmp	r3, #1
 8000664:	d006      	beq.n	8000674 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000666:	2b01      	cmp	r3, #1
 8000668:	d302      	bcc.n	8000670 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 800066a:	2b02      	cmp	r3, #2
 800066c:	d004      	beq.n	8000678 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 800066e:	e005      	b.n	800067c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000672:	e003      	b.n	800067c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;

	case 1:
		return HSE_Clock;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000676:	e001      	b.n	800067c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;

	case 2:
		return 16000000;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800067a:	e7ff      	b.n	800067c <MCAL_RCC_GetSYS_CLCKFreq+0x28>

	}



}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000
 8000688:	007a1200 	.word	0x007a1200
 800068c:	00f42400 	.word	0x00f42400

08000690 <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
1100: SYSCLK divided by 64
1101: SYSCLK divided by 128
1110: SYSCLK divided by 256
1111: SYSCLK divided by 512*/

	return (MCAL_RCC_GetSYS_CLCKFreq() >>  AHBPrescTable[ (RCC->CFGR >> 4) & 0xF]);
 8000694:	f7ff ffde 	bl	8000654 <MCAL_RCC_GetSYS_CLCKFreq>
 8000698:	4601      	mov	r1, r0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MCAL_RCC_GetHCLKFreq+0x20>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80006a6:	5cd3      	ldrb	r3, [r2, r3]
 80006a8:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	08000adc 	.word	0x08000adc

080006b8 <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
100: HCLK divided by 2
101: HCLK divided by 4
110: HCLK divided by 8
111: HCLK divided by 16*/

	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ (RCC->CFGR >>8 )& 0b111 ] );
 80006bc:	f7ff ffe8 	bl	8000690 <MCAL_RCC_GetHCLKFreq>
 80006c0:	4601      	mov	r1, r0
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	f003 0307 	and.w	r3, r3, #7
 80006cc:	4a03      	ldr	r2, [pc, #12]	; (80006dc <MCAL_RCC_GetPCLK1Freq+0x24>)
 80006ce:	5cd3      	ldrb	r3, [r2, r3]
 80006d0:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006d4:	4618      	mov	r0, r3
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	08000ad4 	.word	0x08000ad4

080006e0 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)

{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16
	*/

	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ (RCC->CFGR >>11 )& 0b111 ] );
 80006e4:	f7ff ffd4 	bl	8000690 <MCAL_RCC_GetHCLKFreq>
 80006e8:	4601      	mov	r1, r0
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	0adb      	lsrs	r3, r3, #11
 80006f0:	f003 0307 	and.w	r3, r3, #7
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	fa21 f303 	lsr.w	r3, r1, r3


}
 80006fc:	4618      	mov	r0, r3
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	08000ad4 	.word	0x08000ad4

08000708 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Conf)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	Global_UART_Config=UART_Conf;
 8000712:	4a57      	ldr	r2, [pc, #348]	; (8000870 <MCAL_UART_Init+0x168>)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	6013      	str	r3, [r2, #0]

	uint32_t Pclk , BRR;

	//Enable UART CLOCK

	if(USARTx==USART1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a56      	ldr	r2, [pc, #344]	; (8000874 <MCAL_UART_Init+0x16c>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d106      	bne.n	800072e <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000720:	4b55      	ldr	r3, [pc, #340]	; (8000878 <MCAL_UART_Init+0x170>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a54      	ldr	r2, [pc, #336]	; (8000878 <MCAL_UART_Init+0x170>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	e014      	b.n	8000758 <MCAL_UART_Init+0x50>
	}
	else if(USARTx==USART2)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a52      	ldr	r2, [pc, #328]	; (800087c <MCAL_UART_Init+0x174>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d106      	bne.n	8000744 <MCAL_UART_Init+0x3c>
		{
			RCC_USART2_CLK_EN();
 8000736:	4b50      	ldr	r3, [pc, #320]	; (8000878 <MCAL_UART_Init+0x170>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a4f      	ldr	r2, [pc, #316]	; (8000878 <MCAL_UART_Init+0x170>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	e009      	b.n	8000758 <MCAL_UART_Init+0x50>
		}

	else if(USARTx==USART3)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a4e      	ldr	r2, [pc, #312]	; (8000880 <MCAL_UART_Init+0x178>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d105      	bne.n	8000758 <MCAL_UART_Init+0x50>
		{
			RCC_USART3_CLK_EN();
 800074c:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <MCAL_UART_Init+0x170>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	4a49      	ldr	r2, [pc, #292]	; (8000878 <MCAL_UART_Init+0x170>)
 8000752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000756:	61d3      	str	r3, [r2, #28]
		}


	//Enable UE BIT
	USARTx->CR1 |=(1<<13);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	60da      	str	r2, [r3, #12]

	//Select word Length
	USARTx->CR1 |= UART_Conf->WordLength;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	8912      	ldrh	r2, [r2, #8]
 800076c:	431a      	orrs	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60da      	str	r2, [r3, #12]

	//Mode select
	USARTx->CR1 |= UART_Conf->mode;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	431a      	orrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	60da      	str	r2, [r3, #12]

	//set parity
	USARTx->CR1 |= UART_Conf->parity;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	7a92      	ldrb	r2, [r2, #10]
 8000788:	431a      	orrs	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60da      	str	r2, [r3, #12]

	//Stop bits
	USARTx->CR2 |= UART_Conf->StopBits;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	7ad2      	ldrb	r2, [r2, #11]
 8000796:	431a      	orrs	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	611a      	str	r2, [r3, #16]

	//Hardware flow control

	USARTx->CR3 |= UART_Conf->HWFLOWCTRL;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	7b12      	ldrb	r2, [r2, #12]
 80007a4:	431a      	orrs	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	615a      	str	r2, [r3, #20]

	//Set Baud Rate
	//check for uart

	if(USARTx==USART1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a31      	ldr	r2, [pc, #196]	; (8000874 <MCAL_UART_Init+0x16c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d103      	bne.n	80007ba <MCAL_UART_Init+0xb2>
	{
		Pclk=MCAL_RCC_GetPCLK2Freq();
 80007b2:	f7ff ff95 	bl	80006e0 <MCAL_RCC_GetPCLK2Freq>
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	e002      	b.n	80007c0 <MCAL_UART_Init+0xb8>
	}
	else
	{
		Pclk=MCAL_RCC_GetPCLK1Freq();
 80007ba:	f7ff ff7d 	bl	80006b8 <MCAL_RCC_GetPCLK1Freq>
 80007be:	60f8      	str	r0, [r7, #12]
	}

	BRR=UART_BRR_Register(Pclk,UART_Conf->BaudRate);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007cc:	0119      	lsls	r1, r3, #4
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	009a      	lsls	r2, r3, #2
 80007d8:	441a      	add	r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80007f0:	2064      	movs	r0, #100	; 0x64
 80007f2:	fb00 f303 	mul.w	r3, r0, r3
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <MCAL_UART_Init+0x17c>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	095b      	lsrs	r3, r3, #5
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	430b      	orrs	r3, r1
 8000808:	60bb      	str	r3, [r7, #8]

	USARTx->BRR=BRR;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	609a      	str	r2, [r3, #8]


   //Enable IRQ

	if(UART_Conf->IRQEnable != UART_IRQ_Enable_NONE)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	7b5b      	ldrb	r3, [r3, #13]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d026      	beq.n	8000866 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Conf->IRQEnable);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	7b52      	ldrb	r2, [r2, #13]
 8000820:	431a      	orrs	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60da      	str	r2, [r3, #12]

		if(USARTx==USART1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MCAL_UART_Init+0x16c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MCAL_UART_Init+0x180>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MCAL_UART_Init+0x180>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	6013      	str	r3, [r2, #0]





}
 800083a:	e014      	b.n	8000866 <MCAL_UART_Init+0x15e>
		else if(USARTx==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <MCAL_UART_Init+0x174>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d106      	bne.n	8000852 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MCAL_UART_Init+0x180>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <MCAL_UART_Init+0x180>)
 800084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	e009      	b.n	8000866 <MCAL_UART_Init+0x15e>
		else if(USARTx==USART3)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <MCAL_UART_Init+0x178>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d105      	bne.n	8000866 <MCAL_UART_Init+0x15e>
					NVIC_IRQ39_USART3_Enable;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MCAL_UART_Init+0x180>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <MCAL_UART_Init+0x180>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6013      	str	r3, [r2, #0]
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000001c 	.word	0x2000001c
 8000874:	40013800 	.word	0x40013800
 8000878:	40021000 	.word	0x40021000
 800087c:	40004400 	.word	0x40004400
 8000880:	40004800 	.word	0x40004800
 8000884:	51eb851f 	.word	0x51eb851f
 8000888:	e000e104 	.word	0xe000e104

0800088c <MCAL_UART_SendData>:


}

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	4613      	mov	r3, r2
 8000898:	71fb      	strb	r3, [r7, #7]

	if(PollingEn==enable)
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d106      	bne.n	80008ae <MCAL_UART_SendData+0x22>
	{
		while(! (USARTx->SR & 1<<7) );
 80008a0:	bf00      	nop
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f9      	beq.n	80008a2 <MCAL_UART_SendData+0x16>
	}

	if(Global_UART_Config->WordLength == UART_WordLength_9Bits)
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MCAL_UART_SendData+0x50>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	891b      	ldrh	r3, [r3, #8]
 80008b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b8:	d106      	bne.n	80008c8 <MCAL_UART_SendData+0x3c>
	{
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	605a      	str	r2, [r3, #4]
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
	}



}
 80008c6:	e004      	b.n	80008d2 <MCAL_UART_SendData+0x46>
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	605a      	str	r2, [r3, #4]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	2000001c 	.word	0x2000001c

080008e0 <MCAL_UART_ReceiveData>:

void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer ,enum Polling_mechism PollingEn )
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	4613      	mov	r3, r2
 80008ec:	71fb      	strb	r3, [r7, #7]
	if(PollingEn==enable)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d106      	bne.n	8000902 <MCAL_UART_ReceiveData+0x22>
	{
		while(! (USARTx->SR & 1<<5) );
 80008f4:	bf00      	nop
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <MCAL_UART_ReceiveData+0x16>
	}

	if(Global_UART_Config->WordLength == UART_WordLength_9Bits)
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MCAL_UART_ReceiveData+0x88>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	891b      	ldrh	r3, [r3, #8]
 8000908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800090c:	d112      	bne.n	8000934 <MCAL_UART_ReceiveData+0x54>
	{
		if(Global_UART_Config->parity==UART_Parity_None)
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MCAL_UART_ReceiveData+0x88>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	7a9b      	ldrb	r3, [r3, #10]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d105      	bne.n	8000924 <MCAL_UART_ReceiveData+0x44>
		{

		 *((uint16_t *)pTxBuffer) =USARTx->DR  ;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	b29a      	uxth	r2, r3
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	801a      	strh	r2, [r3, #0]
				}

	}


}
 8000922:	e01c      	b.n	800095e <MCAL_UART_ReceiveData+0x7e>
			*((uint16_t *)pTxBuffer) = (USARTx->DR & (uint8_t)0xff) ;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	b29a      	uxth	r2, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	801a      	strh	r2, [r3, #0]
}
 8000932:	e014      	b.n	800095e <MCAL_UART_ReceiveData+0x7e>
		if(Global_UART_Config->parity==UART_Parity_None)
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MCAL_UART_ReceiveData+0x88>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	7a9b      	ldrb	r3, [r3, #10]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d107      	bne.n	800094e <MCAL_UART_ReceiveData+0x6e>
				 *((uint16_t *)pTxBuffer) =(USARTx->DR  & (uint8_t)0xff);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	b29b      	uxth	r3, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	b29a      	uxth	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	801a      	strh	r2, [r3, #0]
}
 800094c:	e007      	b.n	800095e <MCAL_UART_ReceiveData+0x7e>
					*((uint16_t *)pTxBuffer) = (USARTx->DR & (uint8_t)0x7f) ;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	b29b      	uxth	r3, r3
 8000954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000958:	b29a      	uxth	r2, r3
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	801a      	strh	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	2000001c 	.word	0x2000001c

0800096c <MCAL_UART_GPIO_Set_Pins>:




void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t GPIOPincfg;
	if(USARTx==USART1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a2b      	ldr	r2, [pc, #172]	; (8000a24 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d118      	bne.n	80009ae <MCAL_UART_GPIO_Set_Pins+0x42>
	{
		//PA9 TX ALT PP
		GPIOPincfg.GPIO_PinNumber=GPIO_PIN_9;
 800097c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000980:	81bb      	strh	r3, [r7, #12]
		GPIOPincfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8000982:	2306      	movs	r3, #6
 8000984:	73bb      	strb	r3, [r7, #14]
		GPIOPincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000986:	2301      	movs	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &GPIOPincfg);
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	4619      	mov	r1, r3
 8000990:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000992:	f7ff fca5 	bl	80002e0 <MCAL_GPIO_Init>

		//PA10 RX
		GPIOPincfg.GPIO_PinNumber=GPIO_PIN_10;
 8000996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099a:	81bb      	strh	r3, [r7, #12]
		GPIOPincfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 800099c:	2308      	movs	r3, #8
 800099e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &GPIOPincfg);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	4820      	ldr	r0, [pc, #128]	; (8000a28 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80009a8:	f7ff fc9a 	bl	80002e0 <MCAL_GPIO_Init>





}
 80009ac:	e036      	b.n	8000a1c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx==USART2)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d116      	bne.n	80009e4 <MCAL_UART_GPIO_Set_Pins+0x78>
			GPIOPincfg.GPIO_PinNumber=GPIO_PIN_2;
 80009b6:	2304      	movs	r3, #4
 80009b8:	81bb      	strh	r3, [r7, #12]
			GPIOPincfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80009ba:	2306      	movs	r3, #6
 80009bc:	73bb      	strb	r3, [r7, #14]
			GPIOPincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80009be:	2301      	movs	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &GPIOPincfg);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	4817      	ldr	r0, [pc, #92]	; (8000a28 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80009ca:	f7ff fc89 	bl	80002e0 <MCAL_GPIO_Init>
			GPIOPincfg.GPIO_PinNumber=GPIO_PIN_3;
 80009ce:	2308      	movs	r3, #8
 80009d0:	81bb      	strh	r3, [r7, #12]
			GPIOPincfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 80009d2:	2308      	movs	r3, #8
 80009d4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &GPIOPincfg);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80009de:	f7ff fc7f 	bl	80002e0 <MCAL_GPIO_Init>
}
 80009e2:	e01b      	b.n	8000a1c <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx==USART3)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d117      	bne.n	8000a1c <MCAL_UART_GPIO_Set_Pins+0xb0>
			GPIOPincfg.GPIO_PinNumber=GPIO_PIN_10;
 80009ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f0:	81bb      	strh	r3, [r7, #12]
			GPIOPincfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80009f2:	2306      	movs	r3, #6
 80009f4:	73bb      	strb	r3, [r7, #14]
			GPIOPincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &GPIOPincfg);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000a02:	f7ff fc6d 	bl	80002e0 <MCAL_GPIO_Init>
			GPIOPincfg.GPIO_PinNumber=GPIO_PIN_11;
 8000a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a0a:	81bb      	strh	r3, [r7, #12]
			GPIOPincfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &GPIOPincfg);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000a18:	f7ff fc62 	bl	80002e0 <MCAL_GPIO_Init>
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40013800 	.word	0x40013800
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40004800 	.word	0x40004800
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  Global_UART_Config->UART_IRQ_CALLBACK();
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <USART1_IRQHandler+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	4798      	blx	r3

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000001c 	.word	0x2000001c

08000a4c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  Global_UART_Config->UART_IRQ_CALLBACK();
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <USART2_IRQHandler+0x10>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	4798      	blx	r3

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000001c 	.word	0x2000001c

08000a60 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

  Global_UART_Config->UART_IRQ_CALLBACK();
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <USART3_IRQHandler+0x10>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	4798      	blx	r3

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000001c 	.word	0x2000001c

08000a74 <__libc_init_array>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	2500      	movs	r5, #0
 8000a78:	4e0c      	ldr	r6, [pc, #48]	; (8000aac <__libc_init_array+0x38>)
 8000a7a:	4c0d      	ldr	r4, [pc, #52]	; (8000ab0 <__libc_init_array+0x3c>)
 8000a7c:	1ba4      	subs	r4, r4, r6
 8000a7e:	10a4      	asrs	r4, r4, #2
 8000a80:	42a5      	cmp	r5, r4
 8000a82:	d109      	bne.n	8000a98 <__libc_init_array+0x24>
 8000a84:	f000 f81a 	bl	8000abc <_init>
 8000a88:	2500      	movs	r5, #0
 8000a8a:	4e0a      	ldr	r6, [pc, #40]	; (8000ab4 <__libc_init_array+0x40>)
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <__libc_init_array+0x44>)
 8000a8e:	1ba4      	subs	r4, r4, r6
 8000a90:	10a4      	asrs	r4, r4, #2
 8000a92:	42a5      	cmp	r5, r4
 8000a94:	d105      	bne.n	8000aa2 <__libc_init_array+0x2e>
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a9c:	4798      	blx	r3
 8000a9e:	3501      	adds	r5, #1
 8000aa0:	e7ee      	b.n	8000a80 <__libc_init_array+0xc>
 8000aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aa6:	4798      	blx	r3
 8000aa8:	3501      	adds	r5, #1
 8000aaa:	e7f2      	b.n	8000a92 <__libc_init_array+0x1e>
 8000aac:	08000aec 	.word	0x08000aec
 8000ab0:	08000aec 	.word	0x08000aec
 8000ab4:	08000aec 	.word	0x08000aec
 8000ab8:	08000af0 	.word	0x08000af0

08000abc <_init>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	bf00      	nop
 8000ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac2:	bc08      	pop	{r3}
 8000ac4:	469e      	mov	lr, r3
 8000ac6:	4770      	bx	lr

08000ac8 <_fini>:
 8000ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aca:	bf00      	nop
 8000acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ace:	bc08      	pop	{r3}
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	4770      	bx	lr
