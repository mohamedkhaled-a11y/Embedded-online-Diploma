
rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001384  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014f0  080014f0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080014f0  080014f0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014f0  080014f0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014f0  080014f0  000114f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014f4  080014f4  000114f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080014f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000008  08001500  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08001500  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006663  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012b0  00000000  00000000  00026694  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003b0  00000000  00000000  00027948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000328  00000000  00000000  00027cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004daf  00000000  00000000  00028020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003c01  00000000  00000000  0002cdcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000139e0  00000000  00000000  000309d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000443b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cc8  00000000  00000000  0004442c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	0800149c 	.word	0x0800149c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	0800149c 	.word	0x0800149c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <NMI_Handler>:


unsigned char SYSTIK_LED;

  void NMI_Handler(void)
  {
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

	  while(1);
 8000220:	e7fe      	b.n	8000220 <NMI_Handler+0x4>

08000222 <HardFault_Handler>:

  }
  void HardFault_Handler(void)
  {
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0

	  while(1);
 8000226:	e7fe      	b.n	8000226 <HardFault_Handler+0x4>

08000228 <MemManage_Handler>:

  }
  void	MemManage_Handler(void)
  {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	          "MRSNE r0, PSP \n"
	          "B hard_fault_handler_c \n"
	      );

*/
	  while(1);
 800022c:	e7fe      	b.n	800022c <MemManage_Handler+0x4>

0800022e <BusFault_Handler>:

  }
  void	BusFault_Handler(void)
  {
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0

	  while(1);
 8000232:	e7fe      	b.n	8000232 <BusFault_Handler+0x4>

08000234 <UsageFault_Handler>:
  }
  void	UsageFault_Handler(void)
  {
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

	  while(1);
 8000238:	e7fe      	b.n	8000238 <UsageFault_Handler+0x4>

0800023a <SVC_Handler>:


  __attribute ((naked)) void SVC_Handler ()
  {
  	//	SWITCH_CPU_AccessLevel (privileged);
  	__asm ("tst lr, #4 \n\t"
 800023a:	f01e 0f04 	tst.w	lr, #4
 800023e:	bf0c      	ite	eq
 8000240:	f3ef 8008 	mrseq	r0, MSP
 8000244:	f3ef 8009 	mrsne	r0, PSP
 8000248:	f000 b9e6 	b.w	8000618 <OS_SVC>
  			"ITE EQ \n\t" //To execute Thumb instructions conditionally, you can either use an IT instruction, or a conditional branch instruction.
  			"mrseq r0,MSP \n\t "
  			"mrsne r0,PSP \n\t"
  			"B OS_SVC");
  }
 800024c:	bf00      	nop
	...

08000250 <HW_init>:




  void HW_init()
  {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0



  	//	decrease PenSV  interrupt priority to be  smaller than or equal  SySTICK Timer
  	//SysTICK have a priority 14
  	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 8000254:	210f      	movs	r1, #15
 8000256:	f06f 0001 	mvn.w	r0, #1
 800025a:	f7ff ff93 	bl	8000184 <__NVIC_SetPriority>
  	// Enable usage fault, bus fault, and memory management fault
  	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk;
 800025e:	4b04      	ldr	r3, [pc, #16]	; (8000270 <HW_init+0x20>)
 8000260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000262:	4a03      	ldr	r2, [pc, #12]	; (8000270 <HW_init+0x20>)
 8000264:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000268:	6253      	str	r3, [r2, #36]	; 0x24


  }
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <trigger_OS_PendSV>:



  void trigger_OS_PendSV()
  {
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <trigger_OS_PendSV+0x18>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <trigger_OS_PendSV+0x18>)
 800027e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000282:	6053      	str	r3, [r2, #4]

  }
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <Start_Ticker>:



 void Start_Ticker()
 {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
		//	8 MHZ
		//	1 count -> 0.125 us
		//	X count -> 1 ms
		//	X = 8000 Count

		 SysTick_Config(8000);
 8000294:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000298:	f7ff ff9e 	bl	80001d8 <SysTick_Config>

 }
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <SysTick_Handler>:

 void SysTick_Handler(void)
 {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	 SYSTIK_LED ^=1;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <SysTick_Handler+0x24>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	f083 0301 	eor.w	r3, r3, #1
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <SysTick_Handler+0x24>)
 80002b0:	701a      	strb	r2, [r3, #0]
	 RTOS_update_Task_Timing() ;
 80002b2:	f000 fc5d 	bl	8000b70 <RTOS_update_Task_Timing>

	 Decide_whatNext();
 80002b6:	f000 f9e5 	bl	8000684 <Decide_whatNext>

	 trigger_OS_PendSV();
 80002ba:	f7ff ffdb 	bl	8000274 <trigger_OS_PendSV>


 }
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000088 	.word	0x20000088

080002c8 <FIFO_init>:
 */


#include"RTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d101      	bne.n	80002de <FIFO_init+0x16>
		return FIFO_NULL;
 80002da:	2303      	movs	r3, #3
 80002dc:	e011      	b.n	8000302 <FIFO_init+0x3a>

	fifo->base = buff ;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	68da      	ldr	r2, [r3, #12]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000300:	2300      	movs	r3, #0

}
 8000302:	4618      	mov	r0, r3
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d003      	beq.n	8000326 <FIFO_enqueue+0x1a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d101      	bne.n	800032a <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8000326:	2303      	movs	r3, #3
 8000328:	e02d      	b.n	8000386 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	685a      	ldr	r2, [r3, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	429a      	cmp	r2, r3
 8000334:	d107      	bne.n	8000346 <FIFO_enqueue+0x3a>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	691b      	ldr	r3, [r3, #16]
 800033e:	429a      	cmp	r2, r3
 8000340:	d101      	bne.n	8000346 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 8000342:	2301      	movs	r3, #1
 8000344:	e01f      	b.n	8000386 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	1c5a      	adds	r2, r3, #1
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	68d2      	ldr	r2, [r2, #12]
 8000360:	4611      	mov	r1, r2
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	6912      	ldr	r2, [r2, #16]
 8000366:	0092      	lsls	r2, r2, #2
 8000368:	440a      	add	r2, r1
 800036a:	3a04      	subs	r2, #4
 800036c:	4293      	cmp	r3, r2
 800036e:	d104      	bne.n	800037a <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	68da      	ldr	r2, [r3, #12]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	e004      	b.n	8000384 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	1d1a      	adds	r2, r3, #4
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000384:	2300      	movs	r3, #0


}
 8000386:	4618      	mov	r0, r3
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d003      	beq.n	80003aa <FIFO_dequeue+0x1a>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d101      	bne.n	80003ae <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 80003aa:	2303      	movs	r3, #3
 80003ac:	e028      	b.n	8000400 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	685a      	ldr	r2, [r3, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d101      	bne.n	80003be <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003ba:	2302      	movs	r3, #2
 80003bc:	e020      	b.n	8000400 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	1e5a      	subs	r2, r3, #1
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68d2      	ldr	r2, [r2, #12]
 80003da:	4611      	mov	r1, r2
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	6912      	ldr	r2, [r2, #16]
 80003e0:	0092      	lsls	r2, r2, #2
 80003e2:	440a      	add	r2, r1
 80003e4:	3a04      	subs	r2, #4
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d104      	bne.n	80003f4 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	68da      	ldr	r2, [r3, #12]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	e004      	b.n	80003fe <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	1d1a      	adds	r2, r3, #4
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <RTOS_Define_Task>:
void Decide_whatNext();



MYRTOS_errorID RTOS_Define_Task(Task_ref *task,unsigned int taskStackSize,void(*ptr_task)(),unsigned int taskPriority,char TaskName[10])
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b086      	sub	sp, #24
 800040e:	af00      	add	r7, sp, #0
 8000410:	60f8      	str	r0, [r7, #12]
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	603b      	str	r3, [r7, #0]
	    MYRTOS_errorID ERR = NO_ERROR;
 8000418:	2300      	movs	r3, #0
 800041a:	75fb      	strb	r3, [r7, #23]
    	task->task_stack_size = taskStackSize;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	601a      	str	r2, [r3, #0]
    	task->task_priority  =  taskPriority ;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	605a      	str	r2, [r3, #4]
    	strcpy(task->taskName, TaskName);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	331c      	adds	r3, #28
 800042c:	6a39      	ldr	r1, [r7, #32]
 800042e:	4618      	mov	r0, r3
 8000430:	f001 f82c 	bl	800148c <strcpy>
    	task->p_task_entry =ptr_task;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	609a      	str	r2, [r3, #8]

    	ERR += RTOS_CREAT_TASK(task);
 800043a:	68f8      	ldr	r0, [r7, #12]
 800043c:	f000 f9f0 	bl	8000820 <RTOS_CREAT_TASK>
 8000440:	4603      	mov	r3, r0
 8000442:	461a      	mov	r2, r3
 8000444:	7dfb      	ldrb	r3, [r7, #23]
 8000446:	4413      	add	r3, r2
 8000448:	75fb      	strb	r3, [r7, #23]


       return ERR ;
 800044a:	7dfb      	ldrb	r3, [r7, #23]


}
 800044c:	4618      	mov	r0, r3
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <PendSV_Handler>:

	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.PCurrent_Task->Current_PSP);
 8000454:	4b6f      	ldr	r3, [pc, #444]	; (8000614 <PendSV_Handler+0x1c0>)
 8000456:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045a:	f3ef 8009 	mrs	r0, PSP
 800045e:	4602      	mov	r2, r0
 8000460:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.PCurrent_Task->Current_PSP-- ;
 8000462:	4b6c      	ldr	r3, [pc, #432]	; (8000614 <PendSV_Handler+0x1c0>)
 8000464:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	3a04      	subs	r2, #4
 800046c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 800046e:	4b69      	ldr	r3, [pc, #420]	; (8000614 <PendSV_Handler+0x1c0>)
 8000470:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4622      	mov	r2, r4
 8000478:	601a      	str	r2, [r3, #0]
	OS_Control.PCurrent_Task->Current_PSP-- ;
 800047a:	4b66      	ldr	r3, [pc, #408]	; (8000614 <PendSV_Handler+0x1c0>)
 800047c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	3a04      	subs	r2, #4
 8000484:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 8000486:	4b63      	ldr	r3, [pc, #396]	; (8000614 <PendSV_Handler+0x1c0>)
 8000488:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	462a      	mov	r2, r5
 8000490:	601a      	str	r2, [r3, #0]
	OS_Control.PCurrent_Task->Current_PSP-- ;
 8000492:	4b60      	ldr	r3, [pc, #384]	; (8000614 <PendSV_Handler+0x1c0>)
 8000494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	3a04      	subs	r2, #4
 800049c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 800049e:	4b5d      	ldr	r3, [pc, #372]	; (8000614 <PendSV_Handler+0x1c0>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4632      	mov	r2, r6
 80004a8:	601a      	str	r2, [r3, #0]
	OS_Control.PCurrent_Task->Current_PSP-- ;
 80004aa:	4b5a      	ldr	r3, [pc, #360]	; (8000614 <PendSV_Handler+0x1c0>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	3a04      	subs	r2, #4
 80004b4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 80004b6:	4b57      	ldr	r3, [pc, #348]	; (8000614 <PendSV_Handler+0x1c0>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	463a      	mov	r2, r7
 80004c0:	601a      	str	r2, [r3, #0]
	OS_Control.PCurrent_Task->Current_PSP-- ;
 80004c2:	4b54      	ldr	r3, [pc, #336]	; (8000614 <PendSV_Handler+0x1c0>)
 80004c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004c8:	699a      	ldr	r2, [r3, #24]
 80004ca:	3a04      	subs	r2, #4
 80004cc:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 80004ce:	4b51      	ldr	r3, [pc, #324]	; (8000614 <PendSV_Handler+0x1c0>)
 80004d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4642      	mov	r2, r8
 80004d8:	601a      	str	r2, [r3, #0]
	OS_Control.PCurrent_Task->Current_PSP-- ;
 80004da:	4b4e      	ldr	r3, [pc, #312]	; (8000614 <PendSV_Handler+0x1c0>)
 80004dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e0:	699a      	ldr	r2, [r3, #24]
 80004e2:	3a04      	subs	r2, #4
 80004e4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 80004e6:	4b4b      	ldr	r3, [pc, #300]	; (8000614 <PendSV_Handler+0x1c0>)
 80004e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	464a      	mov	r2, r9
 80004f0:	601a      	str	r2, [r3, #0]
	OS_Control.PCurrent_Task->Current_PSP-- ;
 80004f2:	4b48      	ldr	r3, [pc, #288]	; (8000614 <PendSV_Handler+0x1c0>)
 80004f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	3a04      	subs	r2, #4
 80004fc:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 80004fe:	4b45      	ldr	r3, [pc, #276]	; (8000614 <PendSV_Handler+0x1c0>)
 8000500:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4652      	mov	r2, sl
 8000508:	601a      	str	r2, [r3, #0]
	OS_Control.PCurrent_Task->Current_PSP-- ;
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <PendSV_Handler+0x1c0>)
 800050c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	3a04      	subs	r2, #4
 8000514:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 8000516:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <PendSV_Handler+0x1c0>)
 8000518:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	465a      	mov	r2, fp
 8000520:	601a      	str	r2, [r3, #0]


	//====================================
	//Restore the Context of the Next Task
	//====================================
	if (OS_Control.PNext_Task != NULL){
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <PendSV_Handler+0x1c0>)
 8000524:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000528:	2b00      	cmp	r3, #0
 800052a:	d009      	beq.n	8000540 <PendSV_Handler+0xec>
	OS_Control.PCurrent_Task = OS_Control.PNext_Task ;
 800052c:	4b39      	ldr	r3, [pc, #228]	; (8000614 <PendSV_Handler+0x1c0>)
 800052e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000532:	4a38      	ldr	r2, [pc, #224]	; (8000614 <PendSV_Handler+0x1c0>)
 8000534:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.PNext_Task = NULL ;
 8000538:	4b36      	ldr	r3, [pc, #216]	; (8000614 <PendSV_Handler+0x1c0>)
 800053a:	2200      	movs	r2, #0
 800053c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 8000540:	4b34      	ldr	r3, [pc, #208]	; (8000614 <PendSV_Handler+0x1c0>)
 8000542:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	469b      	mov	fp, r3
	OS_Control.PCurrent_Task->Current_PSP++ ;
 800054c:	4b31      	ldr	r3, [pc, #196]	; (8000614 <PendSV_Handler+0x1c0>)
 800054e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	3204      	adds	r2, #4
 8000556:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 8000558:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <PendSV_Handler+0x1c0>)
 800055a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	469a      	mov	sl, r3
	OS_Control.PCurrent_Task->Current_PSP++ ;
 8000564:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <PendSV_Handler+0x1c0>)
 8000566:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	3204      	adds	r2, #4
 800056e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <PendSV_Handler+0x1c0>)
 8000572:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4699      	mov	r9, r3
	OS_Control.PCurrent_Task->Current_PSP++ ;
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <PendSV_Handler+0x1c0>)
 800057e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	3204      	adds	r2, #4
 8000586:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <PendSV_Handler+0x1c0>)
 800058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4698      	mov	r8, r3
	OS_Control.PCurrent_Task->Current_PSP++ ;
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <PendSV_Handler+0x1c0>)
 8000596:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059a:	699a      	ldr	r2, [r3, #24]
 800059c:	3204      	adds	r2, #4
 800059e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <PendSV_Handler+0x1c0>)
 80005a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	461f      	mov	r7, r3
	OS_Control.PCurrent_Task->Current_PSP++ ;
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <PendSV_Handler+0x1c0>)
 80005ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b2:	699a      	ldr	r2, [r3, #24]
 80005b4:	3204      	adds	r2, #4
 80005b6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <PendSV_Handler+0x1c0>)
 80005ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	461e      	mov	r6, r3
	OS_Control.PCurrent_Task->Current_PSP++ ;
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <PendSV_Handler+0x1c0>)
 80005c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ca:	699a      	ldr	r2, [r3, #24]
 80005cc:	3204      	adds	r2, #4
 80005ce:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <PendSV_Handler+0x1c0>)
 80005d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	461d      	mov	r5, r3
	OS_Control.PCurrent_Task->Current_PSP++ ;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <PendSV_Handler+0x1c0>)
 80005de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005e2:	699a      	ldr	r2, [r3, #24]
 80005e4:	3204      	adds	r2, #4
 80005e6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control.PCurrent_Task->Current_PSP))  );
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <PendSV_Handler+0x1c0>)
 80005ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	461c      	mov	r4, r3
	OS_Control.PCurrent_Task->Current_PSP++ ;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <PendSV_Handler+0x1c0>)
 80005f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005fa:	699a      	ldr	r2, [r3, #24]
 80005fc:	3204      	adds	r2, #4
 80005fe:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.PCurrent_Task->Current_PSP);
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <PendSV_Handler+0x1c0>)
 8000602:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4618      	mov	r0, r3
 800060a:	f380 8809 	msr	PSP, r0


	// Check if lr_value is a valid return address
	__asm volatile("BX LR");
 800060e:	4770      	bx	lr

}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c

08000618 <OS_SVC>:
void OS_SVC(int* Stack_Frame)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,return address (PC) and XPSR
	unsigned char SVC_number ;
	SVC_number = *((unsigned char*)(((unsigned char*)Stack_Frame[6])-2)) ;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3318      	adds	r3, #24
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3b02      	subs	r3, #2
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	73fb      	strb	r3, [r7, #15]

	switch(SVC_number)
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db1f      	blt.n	8000672 <OS_SVC+0x5a>
 8000632:	2b01      	cmp	r3, #1
 8000634:	dd02      	ble.n	800063c <OS_SVC+0x24>
 8000636:	2b02      	cmp	r3, #2
 8000638:	d017      	beq.n	800066a <OS_SVC+0x52>
		RTOS_Update_Schedular_Table();

		break;
	}

}
 800063a:	e01a      	b.n	8000672 <OS_SVC+0x5a>
		RTOS_Update_Schedular_Table();
 800063c:	f000 f9f4 	bl	8000a28 <RTOS_Update_Schedular_Table>
		if(OS_Control.OS_mode_ID==OSRunning)
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <OS_SVC+0x64>)
 8000642:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000646:	2b01      	cmp	r3, #1
 8000648:	d112      	bne.n	8000670 <OS_SVC+0x58>
			if(strcmp(OS_Control.PCurrent_Task->taskName,"idleTask")!=0)
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <OS_SVC+0x64>)
 800064c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000650:	331c      	adds	r3, #28
 8000652:	490b      	ldr	r1, [pc, #44]	; (8000680 <OS_SVC+0x68>)
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fd8b 	bl	8000170 <strcmp>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d007      	beq.n	8000670 <OS_SVC+0x58>
				Decide_whatNext();
 8000660:	f000 f810 	bl	8000684 <Decide_whatNext>
				trigger_OS_PendSV();
 8000664:	f7ff fe06 	bl	8000274 <trigger_OS_PendSV>
		break;
 8000668:	e002      	b.n	8000670 <OS_SVC+0x58>
		RTOS_Update_Schedular_Table();
 800066a:	f000 f9dd 	bl	8000a28 <RTOS_Update_Schedular_Table>
		break;
 800066e:	e000      	b.n	8000672 <OS_SVC+0x5a>
		break;
 8000670:	bf00      	nop
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000008c 	.word	0x2000008c
 8000680:	080014b4 	.word	0x080014b4

08000684 <Decide_whatNext>:
void Decide_whatNext()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	//if Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_QUEUE.counter == 0 && OS_Control.PCurrent_Task->task_state != Suspended) //FIFO_EMPTY
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <Decide_whatNext+0x98>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d11a      	bne.n	80006c6 <Decide_whatNext+0x42>
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <Decide_whatNext+0x9c>)
 8000692:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000696:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800069a:	2b00      	cmp	r3, #0
 800069c:	d013      	beq.n	80006c6 <Decide_whatNext+0x42>
	{
		OS_Control.PCurrent_Task->task_state  = Running ;
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <Decide_whatNext+0x9c>)
 80006a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a4:	2203      	movs	r2, #3
 80006a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again(round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.PCurrent_Task);
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <Decide_whatNext+0x9c>)
 80006ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006b0:	4619      	mov	r1, r3
 80006b2:	481a      	ldr	r0, [pc, #104]	; (800071c <Decide_whatNext+0x98>)
 80006b4:	f7ff fe2a 	bl	800030c <FIFO_enqueue>
		OS_Control.PNext_Task = OS_Control.PCurrent_Task ;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <Decide_whatNext+0x9c>)
 80006ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <Decide_whatNext+0x9c>)
 80006c0:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.PCurrent_Task);
			OS_Control.PCurrent_Task->task_state = Ready ;
		}
	}
}
 80006c4:	e027      	b.n	8000716 <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.PNext_Task);
 80006c6:	4917      	ldr	r1, [pc, #92]	; (8000724 <Decide_whatNext+0xa0>)
 80006c8:	4814      	ldr	r0, [pc, #80]	; (800071c <Decide_whatNext+0x98>)
 80006ca:	f7ff fe61 	bl	8000390 <FIFO_dequeue>
		OS_Control.PNext_Task->task_state = Running ;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <Decide_whatNext+0x9c>)
 80006d0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80006d4:	2203      	movs	r2, #3
 80006d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.PCurrent_Task->task_priority == OS_Control.PNext_Task->task_priority )&&(OS_Control.PCurrent_Task->task_state != Suspended))
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <Decide_whatNext+0x9c>)
 80006dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <Decide_whatNext+0x9c>)
 80006e4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d113      	bne.n	8000716 <Decide_whatNext+0x92>
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <Decide_whatNext+0x9c>)
 80006f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00c      	beq.n	8000716 <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.PCurrent_Task);
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <Decide_whatNext+0x9c>)
 80006fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <Decide_whatNext+0x98>)
 8000706:	f7ff fe01 	bl	800030c <FIFO_enqueue>
			OS_Control.PCurrent_Task->task_state = Ready ;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <Decide_whatNext+0x9c>)
 800070c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000710:	2202      	movs	r2, #2
 8000712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000238 	.word	0x20000238
 8000720:	2000008c 	.word	0x2000008c
 8000724:	20000230 	.word	0x20000230

08000728 <RTOS_Creat_MainStack>:



MYRTOS_errorID RTOS_Creat_MainStack()
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	MYRTOS_errorID MainStackErr = NO_ERROR;
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]

	OS_Control._S_MSP_ = &_estack;
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <RTOS_Creat_MainStack+0x60>)
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <RTOS_Creat_MainStack+0x64>)
 8000736:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_ = OS_Control._S_MSP_ - Main_Stack_Size ;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <RTOS_Creat_MainStack+0x64>)
 800073c:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000740:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000744:	4a11      	ldr	r2, [pc, #68]	; (800078c <RTOS_Creat_MainStack+0x64>)
 8000746:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

	OS_Control._PSP_Task_locator = (OS_Control._E_MSP_ - 8);
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <RTOS_Creat_MainStack+0x64>)
 800074c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000750:	3b08      	subs	r3, #8
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <RTOS_Creat_MainStack+0x64>)
 8000754:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	if(!OS_Control._S_MSP_ || !OS_Control._E_MSP_ || !OS_Control._PSP_Task_locator)
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <RTOS_Creat_MainStack+0x64>)
 800075a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800075e:	2b00      	cmp	r3, #0
 8000760:	d009      	beq.n	8000776 <RTOS_Creat_MainStack+0x4e>
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <RTOS_Creat_MainStack+0x64>)
 8000764:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000768:	2b00      	cmp	r3, #0
 800076a:	d004      	beq.n	8000776 <RTOS_Creat_MainStack+0x4e>
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <RTOS_Creat_MainStack+0x64>)
 800076e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000772:	2b00      	cmp	r3, #0
 8000774:	d102      	bne.n	800077c <RTOS_Creat_MainStack+0x54>
	{
		MainStackErr += MainStackError;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3303      	adds	r3, #3
 800077a:	71fb      	strb	r3, [r7, #7]

	}

	return MainStackErr;
 800077c:	79fb      	ldrb	r3, [r7, #7]


}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20005000 	.word	0x20005000
 800078c:	2000008c 	.word	0x2000008c

08000790 <RTOS_Init>:

MYRTOS_errorID RTOS_Init()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	HW_init();
 8000796:	f7ff fd5b 	bl	8000250 <HW_init>
	MYRTOS_errorID Init_Err= NO_ERROR;
 800079a:	2300      	movs	r3, #0
 800079c:	71fb      	strb	r3, [r7, #7]

	/*===================update OS_MODE===============*/
	OS_Control.OS_mode_ID=OSsuspend;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <RTOS_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	/*==================Creat Main stack==============*/
	Init_Err+= RTOS_Creat_MainStack();
 80007a6:	f7ff ffbf 	bl	8000728 <RTOS_Creat_MainStack>
 80007aa:	4603      	mov	r3, r0
 80007ac:	461a      	mov	r2, r3
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4413      	add	r3, r2
 80007b2:	71fb      	strb	r3, [r7, #7]

	/*================Creat QUEUE_Ready===============*/


	if(FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO,100)!=FIFO_NO_ERROR)
 80007b4:	2264      	movs	r2, #100	; 0x64
 80007b6:	4914      	ldr	r1, [pc, #80]	; (8000808 <RTOS_Init+0x78>)
 80007b8:	4814      	ldr	r0, [pc, #80]	; (800080c <RTOS_Init+0x7c>)
 80007ba:	f7ff fd85 	bl	80002c8 <FIFO_init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <RTOS_Init+0x3a>
	{
		Init_Err+=FIFO_READY_QUEUE_ERROR;
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	3301      	adds	r3, #1
 80007c8:	71fb      	strb	r3, [r7, #7]
	}

	/*=============Configure Ideal_Task=============== */

	strcpy (MYRTOS_idleTask.taskName, "idleTask");
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <RTOS_Init+0x80>)
 80007cc:	4a11      	ldr	r2, [pc, #68]	; (8000814 <RTOS_Init+0x84>)
 80007ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d0:	c303      	stmia	r3!, {r0, r1}
 80007d2:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.task_priority = 255 ;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <RTOS_Init+0x88>)
 80007d6:	22ff      	movs	r2, #255	; 0xff
 80007d8:	605a      	str	r2, [r3, #4]
	MYRTOS_idleTask.p_task_entry = MYRTOS_IdleTask ;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <RTOS_Init+0x88>)
 80007dc:	4a0f      	ldr	r2, [pc, #60]	; (800081c <RTOS_Init+0x8c>)
 80007de:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.task_stack_size = 512 ;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <RTOS_Init+0x88>)
 80007e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e6:	601a      	str	r2, [r3, #0]

	Init_Err +=RTOS_CREAT_TASK(&MYRTOS_idleTask);
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <RTOS_Init+0x88>)
 80007ea:	f000 f819 	bl	8000820 <RTOS_CREAT_TASK>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4413      	add	r3, r2
 80007f6:	71fb      	strb	r3, [r7, #7]

	return Init_Err;
 80007f8:	79fb      	ldrb	r3, [r7, #7]



}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000008c 	.word	0x2000008c
 8000808:	20000294 	.word	0x20000294
 800080c:	20000238 	.word	0x20000238
 8000810:	2000026c 	.word	0x2000026c
 8000814:	080014b4 	.word	0x080014b4
 8000818:	20000250 	.word	0x20000250
 800081c:	08000b55 	.word	0x08000b55

08000820 <RTOS_CREAT_TASK>:


MYRTOS_errorID RTOS_CREAT_TASK(Task_ref *TASK)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

	MYRTOS_errorID CreatTaskERR = NO_ERROR;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]
	TASK->_S_PSP_TASK = OS_Control._PSP_Task_locator ;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <RTOS_CREAT_TASK+0x80>)
 800082e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	611a      	str	r2, [r3, #16]
	TASK->_E_PSP_TASK = TASK->_S_PSP_TASK - TASK->task_stack_size ;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	691a      	ldr	r2, [r3, #16]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1ad2      	subs	r2, r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	615a      	str	r2, [r3, #20]

	if(TASK->_E_PSP_TASK < (unsigned int)&_eheap)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <RTOS_CREAT_TASK+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d201      	bcs.n	8000852 <RTOS_CREAT_TASK+0x32>
	{
		CreatTaskERR = TASK_Exceeds_Stack_size ;
 800084e:	2302      	movs	r3, #2
 8000850:	73fb      	strb	r3, [r7, #15]
	}

	OS_Control._PSP_Task_locator = (TASK->_E_PSP_TASK - 8 );
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	3b08      	subs	r3, #8
 8000858:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <RTOS_CREAT_TASK+0x80>)
 800085a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198


	CreatTaskERR+=RTOS_CreatTaskStack(TASK);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f822 	bl	80008a8 <RTOS_CreatTaskStack>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	4413      	add	r3, r2
 800086c:	73fb      	strb	r3, [r7, #15]

	OS_Control.OSTasks[OS_Control.NoOfActive_Tasks]=TASK;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <RTOS_CREAT_TASK+0x80>)
 8000870:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000874:	4619      	mov	r1, r3
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <RTOS_CREAT_TASK+0x80>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	OS_Control.NoOfActive_Tasks++;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <RTOS_CREAT_TASK+0x80>)
 8000880:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000884:	3301      	adds	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <RTOS_CREAT_TASK+0x80>)
 800088a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	TASK->task_state=Suspended;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a


	return CreatTaskERR;
 8000896:	7bfb      	ldrb	r3, [r7, #15]

}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	200007e0 	.word	0x200007e0

080008a8 <RTOS_CreatTaskStack>:

MYRTOS_errorID RTOS_CreatTaskStack(Task_ref *TASK)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID StackingErr = NO_ERROR ;
 80008b0:	2300      	movs	r3, #0
 80008b2:	72fb      	strb	r3, [r7, #11]

	TASK->Current_PSP = TASK->_S_PSP_TASK  ;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	619a      	str	r2, [r3, #24]
	TASK->Current_PSP -- ;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	1f1a      	subs	r2, r3, #4
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	619a      	str	r2, [r3, #24]

	*(TASK->Current_PSP) = 0x01000000;   //Dummy xpsr;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008d0:	601a      	str	r2, [r3, #0]

	TASK->Current_PSP -- ;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	1f1a      	subs	r2, r3, #4
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	619a      	str	r2, [r3, #24]
	*(TASK->Current_PSP) = (unsigned int)TASK->p_task_entry;  //PC (return Address)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	601a      	str	r2, [r3, #0]

	TASK->Current_PSP -- ;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	1f1a      	subs	r2, r3, #4
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	619a      	str	r2, [r3, #24]
	*(TASK->Current_PSP) = 0xFFFFFFFD;         //LR
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f06f 0202 	mvn.w	r2, #2
 80008f8:	601a      	str	r2, [r3, #0]

	for(int i=0;i<13;i++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e00b      	b.n	8000918 <RTOS_CreatTaskStack+0x70>
	{
		TASK->Current_PSP -- ;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	1f1a      	subs	r2, r3, #4
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	619a      	str	r2, [r3, #24]
		*(TASK->Current_PSP) = 0;         //LR
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
	for(int i=0;i<13;i++)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3301      	adds	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b0c      	cmp	r3, #12
 800091c:	ddf0      	ble.n	8000900 <RTOS_CreatTaskStack+0x58>

	}



	return StackingErr;
 800091e:	7afb      	ldrb	r3, [r7, #11]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <RTOS_Activate_Task>:



void RTOS_Activate_Task(Task_ref *TASK)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]

	/*Update Task state*/
	TASK->task_state = Waiting;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_Set_SVC(SVC_ActivateTask);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f813 	bl	8000966 <OS_Set_SVC>

}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <RTOS_Terminate_Task>:

void RTOS_Terminate_Task(Task_ref *TASK)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	TASK->task_state = Suspended;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_Set_SVC(SVC_TerminateTask);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 f804 	bl	8000966 <OS_Set_SVC>


}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <OS_Set_SVC>:



void OS_Set_SVC(SVC_ID SVC_NUM)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
	switch(SVC_NUM)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d006      	beq.n	8000984 <OS_Set_SVC+0x1e>
 8000976:	2b02      	cmp	r3, #2
 8000978:	d006      	beq.n	8000988 <OS_Set_SVC+0x22>
 800097a:	2b00      	cmp	r3, #0
 800097c:	d000      	beq.n	8000980 <OS_Set_SVC+0x1a>
		break;


	}

}
 800097e:	e005      	b.n	800098c <OS_Set_SVC+0x26>
		__asm("svc #0x00");
 8000980:	df00      	svc	0
		break;
 8000982:	e003      	b.n	800098c <OS_Set_SVC+0x26>
		__asm("svc #0x01");
 8000984:	df01      	svc	1
		break;
 8000986:	e001      	b.n	800098c <OS_Set_SVC+0x26>
		__asm("svc #0x02");
 8000988:	df02      	svc	2
		break;
 800098a:	bf00      	nop
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
	...

08000998 <BubbleSort>:


void BubbleSort()
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
	unsigned int i , j, n;
	Task_ref *temp;

	n=OS_Control.NoOfActive_Tasks;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <BubbleSort+0x8c>)
 80009a0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80009a4:	607b      	str	r3, [r7, #4]

	for(i=0;i<n-1;i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e030      	b.n	8000a0e <BubbleSort+0x76>
	{
		for(j=0;j<n-i-1;j++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	e023      	b.n	80009fa <BubbleSort+0x62>
		{
			if(OS_Control.OSTasks[j]->task_priority >  OS_Control.OSTasks[j+1]->task_priority)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <BubbleSort+0x8c>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3301      	adds	r3, #1
 80009c0:	4918      	ldr	r1, [pc, #96]	; (8000a24 <BubbleSort+0x8c>)
 80009c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d913      	bls.n	80009f4 <BubbleSort+0x5c>
			{
				temp=OS_Control.OSTasks[j];
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <BubbleSort+0x8c>)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d4:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j]=OS_Control.OSTasks[j+1];
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <BubbleSort+0x8c>)
 80009dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009e0:	4910      	ldr	r1, [pc, #64]	; (8000a24 <BubbleSort+0x8c>)
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j+1]=temp;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3301      	adds	r3, #1
 80009ec:	490d      	ldr	r1, [pc, #52]	; (8000a24 <BubbleSort+0x8c>)
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0;j<n-i-1;j++)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	3b01      	subs	r3, #1
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d3d4      	bcc.n	80009b2 <BubbleSort+0x1a>
	for(i=0;i<n-1;i++)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3c9      	bcc.n	80009ac <BubbleSort+0x14>

			}
		}
	}

}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2000008c 	.word	0x2000008c

08000a28 <RTOS_Update_Schedular_Table>:

void RTOS_Update_Schedular_Table()
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0

	Task_ref *temp;
	unsigned int i=0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]

	Task_ref* Pcurrent;
	Task_ref* PNext;

	/*Buble sort the schedulat table based on priority*/
	BubbleSort();
 8000a32:	f7ff ffb1 	bl	8000998 <BubbleSort>

	/*Free Ready Queue*/
	while(FIFO_dequeue(&Ready_QUEUE, &temp)!=FIFO_EMPTY);
 8000a36:	bf00      	nop
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482c      	ldr	r0, [pc, #176]	; (8000af0 <RTOS_Update_Schedular_Table+0xc8>)
 8000a3e:	f7ff fca7 	bl	8000390 <FIFO_dequeue>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d1f7      	bne.n	8000a38 <RTOS_Update_Schedular_Table+0x10>

	/*Update Ready QUEUE*/

	while(i<OS_Control.NoOfActive_Tasks)
 8000a48:	e044      	b.n	8000ad4 <RTOS_Update_Schedular_Table+0xac>
	{
		Pcurrent= OS_Control.OSTasks[i];
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <RTOS_Update_Schedular_Table+0xcc>)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	60bb      	str	r3, [r7, #8]
		PNext = OS_Control.OSTasks[i+1];
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <RTOS_Update_Schedular_Table+0xcc>)
 8000a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5e:	607b      	str	r3, [r7, #4]

		if(Pcurrent->task_state !=Suspended)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d031      	beq.n	8000ace <RTOS_Update_Schedular_Table+0xa6>
		{
			/*check if we reach the end of schedular table*/
			if(PNext->task_state == Suspended)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d108      	bne.n	8000a86 <RTOS_Update_Schedular_Table+0x5e>
			{
				FIFO_enqueue(&Ready_QUEUE, Pcurrent);
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	481e      	ldr	r0, [pc, #120]	; (8000af0 <RTOS_Update_Schedular_Table+0xc8>)
 8000a78:	f7ff fc48 	bl	800030c <FIFO_enqueue>
				Pcurrent->task_state = Ready;
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	2202      	movs	r2, #2
 8000a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000a84:	e02f      	b.n	8000ae6 <RTOS_Update_Schedular_Table+0xbe>
			}

			else if(Pcurrent->task_priority < PNext->task_priority )
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d208      	bcs.n	8000aa4 <RTOS_Update_Schedular_Table+0x7c>
			{
				FIFO_enqueue(&Ready_QUEUE, Pcurrent);
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	4816      	ldr	r0, [pc, #88]	; (8000af0 <RTOS_Update_Schedular_Table+0xc8>)
 8000a96:	f7ff fc39 	bl	800030c <FIFO_enqueue>
				Pcurrent->task_state = Ready;
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000aa2:	e020      	b.n	8000ae6 <RTOS_Update_Schedular_Table+0xbe>
			}

			else if(Pcurrent->task_priority == PNext->task_priority )
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d108      	bne.n	8000ac2 <RTOS_Update_Schedular_Table+0x9a>
			{
				FIFO_enqueue(&Ready_QUEUE, Pcurrent);
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	480f      	ldr	r0, [pc, #60]	; (8000af0 <RTOS_Update_Schedular_Table+0xc8>)
 8000ab4:	f7ff fc2a 	bl	800030c <FIFO_enqueue>
				Pcurrent->task_state = Ready;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	2202      	movs	r2, #2
 8000abc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000ac0:	e005      	b.n	8000ace <RTOS_Update_Schedular_Table+0xa6>
			}
			else if(Pcurrent->task_priority > PNext->task_priority )
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d80a      	bhi.n	8000ae4 <RTOS_Update_Schedular_Table+0xbc>
			}

		}


		i++;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.NoOfActive_Tasks)
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <RTOS_Update_Schedular_Table+0xcc>)
 8000ad6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d3b3      	bcc.n	8000a4a <RTOS_Update_Schedular_Table+0x22>
	}


}
 8000ae2:	e000      	b.n	8000ae6 <RTOS_Update_Schedular_Table+0xbe>
				break;
 8000ae4:	bf00      	nop
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000238 	.word	0x20000238
 8000af4:	2000008c 	.word	0x2000008c

08000af8 <MYRTOS_STARTOS>:

void MYRTOS_STARTOS()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

	OS_Control.OS_mode_ID=OSRunning;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MYRTOS_STARTOS+0x54>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	OS_Control.PCurrent_Task =&MYRTOS_idleTask;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MYRTOS_STARTOS+0x54>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MYRTOS_STARTOS+0x58>)
 8000b08:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	RTOS_Activate_Task(&MYRTOS_idleTask);
 8000b0c:	4810      	ldr	r0, [pc, #64]	; (8000b50 <MYRTOS_STARTOS+0x58>)
 8000b0e:	f7ff ff0c 	bl	800092a <RTOS_Activate_Task>

	Start_Ticker();
 8000b12:	f7ff fbbd 	bl	8000290 <Start_Ticker>

	OS_SET_PSP(OS_Control.PCurrent_Task->Current_PSP);
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MYRTOS_STARTOS+0x54>)
 8000b18:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f380 8809 	msr	PSP, r0


	OS_SWITCH_SP_TO_PSP ;
 8000b24:	f3ef 8014 	mrs	r0, CONTROL
 8000b28:	f04f 0102 	mov.w	r1, #2
 8000b2c:	ea40 0001 	orr.w	r0, r0, r1
 8000b30:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_TO_UNPRIVELEDGE ;
 8000b34:	f3ef 8314 	mrs	r3, CONTROL
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	f383 8814 	msr	CONTROL, r3

	MYRTOS_idleTask.p_task_entry();
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <MYRTOS_STARTOS+0x58>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4798      	blx	r3





}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	20000250 	.word	0x20000250

08000b54 <MYRTOS_IdleTask>:



void MYRTOS_IdleTask()
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	while(1)
	{
		idealTask_LED ^=1;
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <MYRTOS_IdleTask+0x18>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f083 0301 	eor.w	r3, r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <MYRTOS_IdleTask+0x18>)
 8000b64:	701a      	strb	r2, [r3, #0]
		__asm("wfe") ;
 8000b66:	bf20      	wfe
		idealTask_LED ^=1;
 8000b68:	e7f6      	b.n	8000b58 <MYRTOS_IdleTask+0x4>
 8000b6a:	bf00      	nop
 8000b6c:	2000024c 	.word	0x2000024c

08000b70 <RTOS_update_Task_Timing>:


}

void RTOS_update_Task_Timing()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	for(int i=0;i<OS_Control.NoOfActive_Tasks;i++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	e031      	b.n	8000be0 <RTOS_update_Task_Timing+0x70>
	{
		if(OS_Control.OSTasks[i]->task_state==Suspended)
 8000b7c:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <RTOS_update_Task_Timing+0x88>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d126      	bne.n	8000bda <RTOS_update_Task_Timing+0x6a>
		{
			if(OS_Control.OSTasks[i]->Timingwaiting.Blocking==Timing_Block_Enable)
 8000b8c:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <RTOS_update_Task_Timing+0x88>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d11e      	bne.n	8000bda <RTOS_update_Task_Timing+0x6a>
			{
				OS_Control.OSTasks[i]->Timingwaiting.Tick_Counts--;
 8000b9c:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <RTOS_update_Task_Timing+0x88>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40

				if(OS_Control.OSTasks[i]->Timingwaiting.Tick_Counts==0)
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <RTOS_update_Task_Timing+0x88>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d110      	bne.n	8000bda <RTOS_update_Task_Timing+0x6a>
				{
					OS_Control.OSTasks[i]->Timingwaiting.Blocking=Timing_Block_Disable  ;
 8000bb8:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <RTOS_update_Task_Timing+0x88>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTasks[i]->task_state=Waiting;
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <RTOS_update_Task_Timing+0x88>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					OS_Set_SVC(SVC_TaskWaitingTime);
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f7ff fec6 	bl	8000966 <OS_Set_SVC>
	for(int i=0;i<OS_Control.NoOfActive_Tasks;i++)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <RTOS_update_Task_Timing+0x88>)
 8000be2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4293      	cmp	r3, r2
 8000bec:	dbc6      	blt.n	8000b7c <RTOS_update_Task_Timing+0xc>

			}

		}
	}
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000008c 	.word	0x2000008c

08000bfc <RTOS_Creat_Mutex>:


MYRTOS_errorID RTOS_Creat_Mutex(Mutex_ref *mMutex,unsigned char *payload , unsigned int payloadSize,char MutexName[10])
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]

mMutex->payloadSize=payloadSize;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	605a      	str	r2, [r3, #4]
mMutex->Payload=payload;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	601a      	str	r2, [r3, #0]
strcpy(mMutex->MutxName,MutexName );
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	3310      	adds	r3, #16
 8000c1a:	6839      	ldr	r1, [r7, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fc35 	bl	800148c <strcpy>

return NO_ERROR;
 8000c22:	2300      	movs	r3, #0

}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <Aquire_Mutex>:

MYRTOS_errorID Aquire_Mutex(Mutex_ref * mMutex, Task_ref *task)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]

   if(mMutex->Currenttask == NULL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <Aquire_Mutex+0x1a>
   {
	   mMutex->Currenttask = task;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	e010      	b.n	8000c68 <Aquire_Mutex+0x3c>
   }
   else
   {
	   if(mMutex->Nexttask ==NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10a      	bne.n	8000c64 <Aquire_Mutex+0x38>
	   {
		   mMutex->Nexttask = task;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	60da      	str	r2, [r3, #12]
		   task->task_state=Suspended;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		   OS_Set_SVC(SVC_TerminateTask);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f7ff fe82 	bl	8000966 <OS_Set_SVC>
 8000c62:	e001      	b.n	8000c68 <Aquire_Mutex+0x3c>


	   }
	   else
	   {
		   return Mutex_Exceeds_Max_No_Of_Users ;
 8000c64:	2307      	movs	r3, #7
 8000c66:	e000      	b.n	8000c6a <Aquire_Mutex+0x3e>


   }


   return NO_ERROR;
 8000c68:	2300      	movs	r3, #0

}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <Release_Mutex>:

void Release_Mutex(Mutex_ref * mMutex)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]

	if (mMutex->Currenttask !=NULL)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00e      	beq.n	8000ca0 <Release_Mutex+0x2e>
	{
		mMutex->Currenttask = mMutex->Nexttask ;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	609a      	str	r2, [r3, #8]
		mMutex->Nexttask=NULL;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
		mMutex->Currenttask->task_state = Waiting;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		OS_Set_SVC(SVC_ActivateTask);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fe63 	bl	8000966 <OS_Set_SVC>

	}


}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <Task1>:
unsigned char payload2[3] = {0,1,2};



void Task1()
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

	static int count =0;
	while(1)
	{
		Task1_LED ^=1;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <Task1+0x48>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <Task1+0x48>)
 8000cb8:	701a      	strb	r2, [r3, #0]
		count++;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <Task1+0x4c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <Task1+0x4c>)
 8000cc2:	6013      	str	r3, [r2, #0]
		if(count==100)
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <Task1+0x4c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b64      	cmp	r3, #100	; 0x64
 8000cca:	d106      	bne.n	8000cda <Task1+0x32>
		{
			Aquire_Mutex(&mutx1,&task1);
 8000ccc:	490a      	ldr	r1, [pc, #40]	; (8000cf8 <Task1+0x50>)
 8000cce:	480b      	ldr	r0, [pc, #44]	; (8000cfc <Task1+0x54>)
 8000cd0:	f7ff ffac 	bl	8000c2c <Aquire_Mutex>
			RTOS_Activate_Task(&task2);
 8000cd4:	480a      	ldr	r0, [pc, #40]	; (8000d00 <Task1+0x58>)
 8000cd6:	f7ff fe28 	bl	800092a <RTOS_Activate_Task>
		//	Aquire_Mutex(&mutx2, &task1);

		}

		if(count==200)
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <Task1+0x4c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2bc8      	cmp	r3, #200	; 0xc8
 8000ce0:	d1e4      	bne.n	8000cac <Task1+0x4>
		{
			Release_Mutex(&mutx1);
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <Task1+0x54>)
 8000ce4:	f7ff ffc5 	bl	8000c72 <Release_Mutex>
			count=0;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <Task1+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
		Task1_LED ^=1;
 8000cee:	e7dd      	b.n	8000cac <Task1+0x4>
 8000cf0:	20000524 	.word	0x20000524
 8000cf4:	20000024 	.word	0x20000024
 8000cf8:	2000049c 	.word	0x2000049c
 8000cfc:	20000428 	.word	0x20000428
 8000d00:	200004e0 	.word	0x200004e0

08000d04 <Task2>:


}

void Task2()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

	static int count =0;
	while(1)
	{
		Task2_LED ^=1;
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <Task2+0x40>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f083 0301 	eor.w	r3, r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <Task2+0x40>)
 8000d14:	701a      	strb	r2, [r3, #0]

		count++;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <Task2+0x44>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <Task2+0x44>)
 8000d1e:	6013      	str	r3, [r2, #0]
		if(count==100)
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <Task2+0x44>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b64      	cmp	r3, #100	; 0x64
 8000d26:	d102      	bne.n	8000d2e <Task2+0x2a>
		{
			RTOS_Activate_Task(&task3);
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <Task2+0x48>)
 8000d2a:	f7ff fdfe 	bl	800092a <RTOS_Activate_Task>
		}

		if(count ==200)
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <Task2+0x44>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2bc8      	cmp	r3, #200	; 0xc8
 8000d34:	d1e8      	bne.n	8000d08 <Task2+0x4>
		{
			RTOS_Terminate_Task(&task2);
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <Task2+0x4c>)
 8000d38:	f7ff fe06 	bl	8000948 <RTOS_Terminate_Task>
			count =0;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <Task2+0x44>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
		Task2_LED ^=1;
 8000d42:	e7e1      	b.n	8000d08 <Task2+0x4>
 8000d44:	200005a0 	.word	0x200005a0
 8000d48:	20000028 	.word	0x20000028
 8000d4c:	2000055c 	.word	0x2000055c
 8000d50:	200004e0 	.word	0x200004e0

08000d54 <Task3>:
}



void Task3()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

	static int count =0;
	while(1)
	{

		Task3_LED ^=1;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <Task3+0x40>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <Task3+0x40>)
 8000d64:	701a      	strb	r2, [r3, #0]

		count++;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <Task3+0x44>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <Task3+0x44>)
 8000d6e:	6013      	str	r3, [r2, #0]
		if(count==100)
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <Task3+0x44>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b64      	cmp	r3, #100	; 0x64
 8000d76:	d102      	bne.n	8000d7e <Task3+0x2a>
		{
			RTOS_Activate_Task(&task4);
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <Task3+0x48>)
 8000d7a:	f7ff fdd6 	bl	800092a <RTOS_Activate_Task>
		}

		if(count ==200)
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <Task3+0x44>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2bc8      	cmp	r3, #200	; 0xc8
 8000d84:	d1e8      	bne.n	8000d58 <Task3+0x4>
		{
			count =0;
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <Task3+0x44>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
			RTOS_Terminate_Task(&task3);
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <Task3+0x4c>)
 8000d8e:	f7ff fddb 	bl	8000948 <RTOS_Terminate_Task>
		Task3_LED ^=1;
 8000d92:	e7e1      	b.n	8000d58 <Task3+0x4>
 8000d94:	20000424 	.word	0x20000424
 8000d98:	2000002c 	.word	0x2000002c
 8000d9c:	20000458 	.word	0x20000458
 8000da0:	2000055c 	.word	0x2000055c

08000da4 <Task4>:




void Task4()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

	static int count=0;
	while(1)
	{
		Task4_LED ^=1;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <Task4+0x48>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f083 0301 	eor.w	r3, r3, #1
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <Task4+0x48>)
 8000db4:	701a      	strb	r2, [r3, #0]
		count++;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <Task4+0x4c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <Task4+0x4c>)
 8000dbe:	6013      	str	r3, [r2, #0]

		if(count==3)
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <Task4+0x4c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d103      	bne.n	8000dd0 <Task4+0x2c>
		{
		//	Aquire_Mutex(&mutx2,&task4);
			Aquire_Mutex(&mutx1,&task4);
 8000dc8:	490a      	ldr	r1, [pc, #40]	; (8000df4 <Task4+0x50>)
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <Task4+0x54>)
 8000dcc:	f7ff ff2e 	bl	8000c2c <Aquire_Mutex>
		}

		if(count ==200)
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <Task4+0x4c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2bc8      	cmp	r3, #200	; 0xc8
 8000dd6:	d1e7      	bne.n	8000da8 <Task4+0x4>
		{
			count =0;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <Task4+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
			Release_Mutex(&mutx1);
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <Task4+0x54>)
 8000de0:	f7ff ff47 	bl	8000c72 <Release_Mutex>
			RTOS_Terminate_Task(&task4);
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <Task4+0x50>)
 8000de6:	f7ff fdaf 	bl	8000948 <RTOS_Terminate_Task>
		Task4_LED ^=1;
 8000dea:	e7dd      	b.n	8000da8 <Task4+0x4>
 8000dec:	20000558 	.word	0x20000558
 8000df0:	20000030 	.word	0x20000030
 8000df4:	20000458 	.word	0x20000458
 8000df8:	20000428 	.word	0x20000428

08000dfc <main>:




int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af02      	add	r7, sp, #8

	MYRTOS_errorID ER;


	if(RTOS_Init()!=NO_ERROR)
 8000e02:	f7ff fcc5 	bl	8000790 <RTOS_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d000      	beq.n	8000e0e <main+0x12>
		while(1);
 8000e0c:	e7fe      	b.n	8000e0c <main+0x10>
	mutx1.Payload=payload;
	mutx1.payloadSize=3;
	strcpy(mutx1.MutxName, "MUTEX1");
	*/

	 RTOS_Creat_Mutex(&mutx1,payload ,3,"MUTEX1");
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <main+0xa8>)
 8000e10:	2203      	movs	r2, #3
 8000e12:	4925      	ldr	r1, [pc, #148]	; (8000ea8 <main+0xac>)
 8000e14:	4825      	ldr	r0, [pc, #148]	; (8000eac <main+0xb0>)
 8000e16:	f7ff fef1 	bl	8000bfc <RTOS_Creat_Mutex>
	 RTOS_Creat_Mutex(&mutx2,payload2 ,3,"MUTEX2");
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <main+0xb4>)
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	4925      	ldr	r1, [pc, #148]	; (8000eb4 <main+0xb8>)
 8000e20:	4825      	ldr	r0, [pc, #148]	; (8000eb8 <main+0xbc>)
 8000e22:	f7ff feeb 	bl	8000bfc <RTOS_Creat_Mutex>
	ER+= RTOS_CREAT_TASK(&task2);
	ER+= RTOS_CREAT_TASK(&task3);
	ER+= RTOS_CREAT_TASK(&task4);

*/
	ER+= RTOS_Define_Task(&task1,1024,Task1,4,"TASK_1");
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <main+0xc0>)
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <main+0xc4>)
 8000e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e32:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <main+0xc8>)
 8000e34:	f7ff fae9 	bl	800040a <RTOS_Define_Task>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4413      	add	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
	ER+= RTOS_Define_Task(&task2,1024,Task2,3,"TASK_2");
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <main+0xcc>)
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2303      	movs	r3, #3
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <main+0xd0>)
 8000e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4e:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <main+0xd4>)
 8000e50:	f7ff fadb 	bl	800040a <RTOS_Define_Task>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	71fb      	strb	r3, [r7, #7]
	ER+= RTOS_Define_Task(&task3,1024,Task3,2,"TASK_3");
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <main+0xd8>)
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2302      	movs	r3, #2
 8000e64:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <main+0xdc>)
 8000e66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6a:	481c      	ldr	r0, [pc, #112]	; (8000edc <main+0xe0>)
 8000e6c:	f7ff facd 	bl	800040a <RTOS_Define_Task>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4413      	add	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
	ER+= RTOS_Define_Task(&task4,1024,Task4,1,"TASK_4");
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <main+0xe4>)
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <main+0xe8>)
 8000e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e86:	4818      	ldr	r0, [pc, #96]	; (8000ee8 <main+0xec>)
 8000e88:	f7ff fabf 	bl	800040a <RTOS_Define_Task>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4413      	add	r3, r2
 8000e94:	71fb      	strb	r3, [r7, #7]


	RTOS_Activate_Task(&task1);
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <main+0xc8>)
 8000e98:	f7ff fd47 	bl	800092a <RTOS_Activate_Task>





	MYRTOS_STARTOS();
 8000e9c:	f7ff fe2c 	bl	8000af8 <MYRTOS_STARTOS>



	while(1)
 8000ea0:	e7fe      	b.n	8000ea0 <main+0xa4>
 8000ea2:	bf00      	nop
 8000ea4:	080014c0 	.word	0x080014c0
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000428 	.word	0x20000428
 8000eb0:	080014c8 	.word	0x080014c8
 8000eb4:	20000004 	.word	0x20000004
 8000eb8:	20000528 	.word	0x20000528
 8000ebc:	080014d0 	.word	0x080014d0
 8000ec0:	08000ca9 	.word	0x08000ca9
 8000ec4:	2000049c 	.word	0x2000049c
 8000ec8:	080014d8 	.word	0x080014d8
 8000ecc:	08000d05 	.word	0x08000d05
 8000ed0:	200004e0 	.word	0x200004e0
 8000ed4:	080014e0 	.word	0x080014e0
 8000ed8:	08000d55 	.word	0x08000d55
 8000edc:	2000055c 	.word	0x2000055c
 8000ee0:	080014e8 	.word	0x080014e8
 8000ee4:	08000da5 	.word	0x08000da5
 8000ee8:	20000458 	.word	0x20000458

08000eec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ef0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <LoopForever+0xe>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	; (8000f38 <LoopForever+0x16>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f1a:	f000 fa93 	bl	8001444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1e:	f7ff ff6d 	bl	8000dfc <main>

08000f22 <LoopForever>:

LoopForever:
    b LoopForever
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
  ldr   r0, =_estack
 8000f24:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000f30:	080014f8 	.word	0x080014f8
  ldr r2, =_sbss
 8000f34:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000f38:	200005e0 	.word	0x200005e0

08000f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_2_IRQHandler>
	...

08000f40 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <EXTI0_IRQHandler+0x1c>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <EXTI0_IRQHandler+0x1c>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <EXTI0_IRQHandler+0x20>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4798      	blx	r3
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010400 	.word	0x40010400
 8000f60:	200005a4 	.word	0x200005a4

08000f64 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <EXTI1_IRQHandler+0x1c>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <EXTI1_IRQHandler+0x1c>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <EXTI1_IRQHandler+0x20>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4798      	blx	r3
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40010400 	.word	0x40010400
 8000f84:	200005a4 	.word	0x200005a4

08000f88 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <EXTI2_IRQHandler+0x1c>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <EXTI2_IRQHandler+0x1c>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <EXTI2_IRQHandler+0x20>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4798      	blx	r3
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010400 	.word	0x40010400
 8000fa8:	200005a4 	.word	0x200005a4

08000fac <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <EXTI3_IRQHandler+0x1c>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <EXTI3_IRQHandler+0x1c>)
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <EXTI3_IRQHandler+0x20>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	4798      	blx	r3
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010400 	.word	0x40010400
 8000fcc:	200005a4 	.word	0x200005a4

08000fd0 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <EXTI4_IRQHandler+0x1c>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <EXTI4_IRQHandler+0x1c>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <EXTI4_IRQHandler+0x20>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	4798      	blx	r3
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010400 	.word	0x40010400
 8000ff0:	200005a4 	.word	0x200005a4

08000ff4 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	2b00      	cmp	r3, #0
 8001002:	d008      	beq.n	8001016 <EXTI9_5_IRQHandler+0x22>
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	4a22      	ldr	r2, [pc, #136]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	6153      	str	r3, [r2, #20]
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <EXTI9_5_IRQHandler+0xa4>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <EXTI9_5_IRQHandler+0x40>
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <EXTI9_5_IRQHandler+0xa4>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <EXTI9_5_IRQHandler+0x5e>
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4a13      	ldr	r2, [pc, #76]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104a:	6153      	str	r3, [r2, #20]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <EXTI9_5_IRQHandler+0xa4>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <EXTI9_5_IRQHandler+0x7c>
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <EXTI9_5_IRQHandler+0xa4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <EXTI9_5_IRQHandler+0x9a>
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <EXTI9_5_IRQHandler+0xa0>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6153      	str	r3, [r2, #20]
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <EXTI9_5_IRQHandler+0xa4>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	4798      	blx	r3

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40010400 	.word	0x40010400
 8001098:	200005a4 	.word	0x200005a4

0800109c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <EXTI15_10_IRQHandler+0x22>
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	4a29      	ldr	r2, [pc, #164]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6153      	str	r3, [r2, #20]
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <EXTI15_10_IRQHandler+0xc0>)
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d008      	beq.n	80010dc <EXTI15_10_IRQHandler+0x40>
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a22      	ldr	r2, [pc, #136]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <EXTI15_10_IRQHandler+0xc0>)
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010da:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <EXTI15_10_IRQHandler+0x5e>
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f2:	6153      	str	r3, [r2, #20]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <EXTI15_10_IRQHandler+0xc0>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <EXTI15_10_IRQHandler+0x7c>
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 800110c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <EXTI15_10_IRQHandler+0xc0>)
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <EXTI15_10_IRQHandler+0x9a>
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6153      	str	r3, [r2, #20]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <EXTI15_10_IRQHandler+0xc0>)
 8001132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001134:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <EXTI15_10_IRQHandler+0xb8>
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <EXTI15_10_IRQHandler+0xbc>)
 8001148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b03      	ldr	r3, [pc, #12]	; (800115c <EXTI15_10_IRQHandler+0xc0>)
 8001150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001152:	4798      	blx	r3

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40010400 	.word	0x40010400
 800115c:	200005a4 	.word	0x200005a4

08001160 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <I2C1_EV_IRQHandler+0xe8>)
 8001178:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001182:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118c:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <I2C1_EV_IRQHandler+0x48>
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d007      	beq.n	80011b4 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 80011ac:	2100      	movs	r1, #0
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f000 f852 	bl	8001258 <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d012      	beq.n	80011ea <I2C1_EV_IRQHandler+0x7e>
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00f      	beq.n	80011ea <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 80011e2:	2102      	movs	r1, #2
 80011e4:	6978      	ldr	r0, [r7, #20]
 80011e6:	f000 f837 	bl	8001258 <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00f      	beq.n	800121a <I2C1_EV_IRQHandler+0xae>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00c      	beq.n	800121a <I2C1_EV_IRQHandler+0xae>
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8001212:	2103      	movs	r1, #3
 8001214:	6978      	ldr	r0, [r7, #20]
 8001216:	f000 f81f 	bl	8001258 <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001222:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00f      	beq.n	800124a <I2C1_EV_IRQHandler+0xde>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00c      	beq.n	800124a <I2C1_EV_IRQHandler+0xde>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d103      	bne.n	800124a <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8001242:	2104      	movs	r1, #4
 8001244:	6978      	ldr	r0, [r7, #20]
 8001246:	f000 f807 	bl	8001258 <Slave_States>
			}
		}



}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40005400 	.word	0x40005400

08001258 <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a32      	ldr	r2, [pc, #200]	; (8001330 <Slave_States+0xd8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	bf14      	ite	ne
 800126c:	2301      	movne	r3, #1
 800126e:	2300      	moveq	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d856      	bhi.n	8001328 <Slave_States+0xd0>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <Slave_States+0x28>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	0800129b 	.word	0x0800129b
 8001284:	08001295 	.word	0x08001295
 8001288:	080012bf 	.word	0x080012bf
 800128c:	080012d7 	.word	0x080012d7
 8001290:	080012fb 	.word	0x080012fb
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8001298:	e046      	b.n	8001328 <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d03b      	beq.n	800131e <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	4922      	ldr	r1, [pc, #136]	; (8001334 <Slave_States+0xdc>)
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	3320      	adds	r3, #32
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2000      	movs	r0, #0
 80012ba:	4798      	blx	r3
		}

		break ;
 80012bc:	e02f      	b.n	800131e <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	491c      	ldr	r1, [pc, #112]	; (8001334 <Slave_States+0xdc>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	3320      	adds	r3, #32
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2002      	movs	r0, #2
 80012d2:	4798      	blx	r3

		break ;
 80012d4:	e028      	b.n	8001328 <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d01f      	beq.n	8001322 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	4913      	ldr	r1, [pc, #76]	; (8001334 <Slave_States+0xdc>)
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	3320      	adds	r3, #32
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2003      	movs	r0, #3
 80012f6:	4798      	blx	r3
		}

		break ;
 80012f8:	e013      	b.n	8001322 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10f      	bne.n	8001326 <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	490a      	ldr	r1, [pc, #40]	; (8001334 <Slave_States+0xdc>)
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	3320      	adds	r3, #32
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2004      	movs	r0, #4
 800131a:	4798      	blx	r3
		}

		break ;
 800131c:	e003      	b.n	8001326 <Slave_States+0xce>
		break ;
 800131e:	bf00      	nop
 8001320:	e002      	b.n	8001328 <Slave_States+0xd0>
		break ;
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <Slave_States+0xd0>
		break ;
 8001326:	bf00      	nop
	}
	}

}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40005400 	.word	0x40005400
 8001334:	20000034 	.word	0x20000034

08001338 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <SPI1_IRQHandler>:
 * 							Generic Functions
 * =======================================================================================
 */
//ISR
void SPI1_IRQHandler (void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI1->SPI_SR &  (1<<1)) >> 1 );
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <SPI1_IRQHandler+0x54>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	793b      	ldrb	r3, [r7, #4]
 8001364:	f362 0300 	bfi	r3, r2, #0, #1
 8001368:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR &  (1<<0)) >> 0 );
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <SPI1_IRQHandler+0x54>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	f362 0341 	bfi	r3, r2, #1, #1
 800137a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR &  (1<<4)) >> 4 );
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <SPI1_IRQHandler+0x54>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	793b      	ldrb	r3, [r7, #4]
 800138a:	f362 0382 	bfi	r3, r2, #2, #1
 800138e:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src) ;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SPI1_IRQHandler+0x58>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	7938      	ldrb	r0, [r7, #4]
 8001398:	4798      	blx	r3

}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40013000 	.word	0x40013000
 80013a8:	2000007c 	.word	0x2000007c

080013ac <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI2->SPI_SR &  (1<<1)) >> 1 );
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <SPI2_IRQHandler+0x54>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	f362 0300 	bfi	r3, r2, #0, #1
 80013c4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SPI_SR &  (1<<0)) >> 0 );
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <SPI2_IRQHandler+0x54>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	793b      	ldrb	r3, [r7, #4]
 80013d2:	f362 0341 	bfi	r3, r2, #1, #1
 80013d6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SPI_SR &  (1<<4)) >> 4 );
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <SPI2_IRQHandler+0x54>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	793b      	ldrb	r3, [r7, #4]
 80013e6:	f362 0382 	bfi	r3, r2, #2, #1
 80013ea:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src) ;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SPI2_IRQHandler+0x58>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	7938      	ldrb	r0, [r7, #4]
 80013f4:	4798      	blx	r3
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40003800 	.word	0x40003800
 8001404:	2000007c 	.word	0x2000007c

08001408 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 800140c:	4b02      	ldr	r3, [pc, #8]	; (8001418 <USART1_IRQHandler+0x10>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	4798      	blx	r3

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000084 	.word	0x20000084

0800141c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <USART2_IRQHandler+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	4798      	blx	r3

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000084 	.word	0x20000084

08001430 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <USART3_IRQHandler+0x10>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	4798      	blx	r3


}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000084 	.word	0x20000084

08001444 <__libc_init_array>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	2500      	movs	r5, #0
 8001448:	4e0c      	ldr	r6, [pc, #48]	; (800147c <__libc_init_array+0x38>)
 800144a:	4c0d      	ldr	r4, [pc, #52]	; (8001480 <__libc_init_array+0x3c>)
 800144c:	1ba4      	subs	r4, r4, r6
 800144e:	10a4      	asrs	r4, r4, #2
 8001450:	42a5      	cmp	r5, r4
 8001452:	d109      	bne.n	8001468 <__libc_init_array+0x24>
 8001454:	f000 f822 	bl	800149c <_init>
 8001458:	2500      	movs	r5, #0
 800145a:	4e0a      	ldr	r6, [pc, #40]	; (8001484 <__libc_init_array+0x40>)
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <__libc_init_array+0x44>)
 800145e:	1ba4      	subs	r4, r4, r6
 8001460:	10a4      	asrs	r4, r4, #2
 8001462:	42a5      	cmp	r5, r4
 8001464:	d105      	bne.n	8001472 <__libc_init_array+0x2e>
 8001466:	bd70      	pop	{r4, r5, r6, pc}
 8001468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800146c:	4798      	blx	r3
 800146e:	3501      	adds	r5, #1
 8001470:	e7ee      	b.n	8001450 <__libc_init_array+0xc>
 8001472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001476:	4798      	blx	r3
 8001478:	3501      	adds	r5, #1
 800147a:	e7f2      	b.n	8001462 <__libc_init_array+0x1e>
 800147c:	080014f0 	.word	0x080014f0
 8001480:	080014f0 	.word	0x080014f0
 8001484:	080014f0 	.word	0x080014f0
 8001488:	080014f4 	.word	0x080014f4

0800148c <strcpy>:
 800148c:	4603      	mov	r3, r0
 800148e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001492:	f803 2b01 	strb.w	r2, [r3], #1
 8001496:	2a00      	cmp	r2, #0
 8001498:	d1f9      	bne.n	800148e <strcpy+0x2>
 800149a:	4770      	bx	lr

0800149c <_init>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	bf00      	nop
 80014a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a2:	bc08      	pop	{r3}
 80014a4:	469e      	mov	lr, r3
 80014a6:	4770      	bx	lr

080014a8 <_fini>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr
